#include "stdafx.h"
#include "platform.h"
#include "level_3.h"
#include "level_6.h"
#include "vedic_ui.h"
#include "strings.h"
#include "resource.h"
#include "TTimeZone.h"
#include "TResultApp.h"
#include "TResultMasaList.h"
#include "DlgCalcProgress.h"
// PORTABLE 


double GetAyanamsa(JULIANDATE);
const char * AvcGetVersionText(void);
extern TString gAyaName;
extern const char * gpszSeparator;
void time_print(TString &str, DAYTIME dt);
int is_daylight_time(VCTIME, int);
int GetShowSetVal(int i);
void AddTextLine(TString &, const char *);
void AddTextLineRtf(TString &str, const char * pt);
void AppendColorTable(TString &str);
void AppendRtfHeader(TString &m_text);
void AddNoteRtf(TString &);

int g_HeaderSize = 36;
int g_Header2Size = 32;
int g_TextSize = 24;
int g_NoteSize = 16;
int g_ShowMode = 1; // 0=text,1=rtf

void AddNoteText(TString &str)
{
	str += "\r\n\r\n";
	str += gpszSeparator;
	str += "\r\nNotes:\r\n\r\n";
	str += "DST - Time is in \'Daylight Saving Time\'\r\nLT  - Time is in \'Local Time\'\r\n";

	if (GetShowSetVal(9) > 0 || GetShowSetVal(10) > 0 || GetShowSetVal(11) > 0 || GetShowSetVal(12) > 0)
	{
		str += "(*) - value at the moment of sunrise\r\n";
	}

	// last line
	str += "\r\nGenerated by ";
	str += gstr[131];
}

// return values
// 0 - DST is off, yesterday was off
// 1 - DST is on, yesterday was off
// 2 - DST is on, yesterday was on
// 3 - DST is off, yesterday was on
int is_daylight_time2(VCTIME vc2, int nIndex)
{
	int t2 = is_daylight_time(vc2, nIndex);
	VCTIME vc3 = vc2;
	vc3.PreviousDay();
	int t1 = is_daylight_time(vc3, nIndex);
	if (t1)
	{
		if (t2)
			return 2;
		else
			return 3;
	}
	else if (t2)
	{
		is_daylight_time(vc2, nIndex);
		is_daylight_time(vc3, nIndex);
		return 1;
	}
	else
		return 0;
}

void CalcEvents(TResultEvents &inEvents, CLocationRef &loc, VCTIME vcStart, VCTIME vcEnd, UInt32 fOptions)
{
	VCTIME vc;
	SUNDATA sun;
	int ndst = 0;
	int nData;

	inEvents.clear();
	inEvents.m_location = loc;
	inEvents.m_vcStart = vcStart;
	inEvents.m_vcEnd = vcEnd;
	inEvents.m_options = fOptions;
	
	VCTIME vcAdd, vcNext;
	EARTHDATA earth = (EARTHDATA)loc;

	vc = vcStart;

	vcAdd = vc;
	vcAdd.InitWeekDay();
	while(vcAdd.IsBeforeThis(vcEnd))
	{
		if (fOptions & CCE_SUN)
		{
			ndst = is_daylight_time2(vcAdd, loc.m_nDST);
			SunCalc(vcAdd, earth, sun);

			vcAdd.shour = sun.arunodaya.GetDayTime();
			inEvents.AddEvent(vcAdd, CCTYPE_S_ARUN, 0, ndst);

			vcAdd.shour = sun.rise.GetDayTime();
			inEvents.AddEvent(vcAdd, CCTYPE_S_RISE, 0, ndst);

			vcAdd.shour = sun.noon.GetDayTime();
			inEvents.AddEvent(vcAdd, CCTYPE_S_NOON, 0, ndst);

			vcAdd.shour = sun.set.GetDayTime();
			inEvents.AddEvent(vcAdd, CCTYPE_S_SET, 0, ndst);
		}

		vcAdd.NextDay();
	}

	if (fOptions & CCE_TIT)
	{
		vcAdd = vc;
		vcAdd.shour = 0.0;
		while(vcAdd.IsBeforeThis(vcEnd))
		{
			nData = GetNextTithiStart(earth, vcAdd, vcNext);
			if (vcNext.GetDayInteger() < vcEnd.GetDayInteger())
			{
				vcNext.InitWeekDay();
				ndst = is_daylight_time2(vcNext, loc.m_nDST);
				inEvents.AddEvent(vcNext, CCTYPE_TITHI, nData, ndst);
			}
			else
			{
				break;
			}
			vcAdd = vcNext;
			vcAdd.shour += 0.2;
			if (vcAdd.shour >= 1.0)
			{
				vcAdd.shour -= 1.0;
				vcAdd.NextDay();
			}
		}
	}

	if (fOptions & CCE_NAK)
	{
		vcAdd = vc;
		vcAdd.shour = 0.0;
		while(vcAdd.IsBeforeThis(vcEnd))
		{
			nData = GetNextNaksatra(earth, vcAdd, vcNext);
			if (vcNext.GetDayInteger() < vcEnd.GetDayInteger())
			{
				vcNext.InitWeekDay();
				ndst = is_daylight_time2(vcNext, loc.m_nDST);
				inEvents.AddEvent(vcNext, CCTYPE_NAKS, nData, ndst);
			}
			else
			{
				break;
			}
			vcAdd = vcNext;
			vcAdd.shour += 0.2;
			if (vcAdd.shour >= 1.0)
			{
				vcAdd.shour -= 1.0;
				vcAdd.NextDay();
			}
		}
	}

	if (fOptions & CCE_SNK)
	{
		vcAdd = vc;
		vcAdd.shour = 0.0;
		while(vcAdd.IsBeforeThis(vcEnd))
		{
			vcNext = GetNextSankranti(vcAdd, nData);
			if (vcNext.GetDayInteger() < vcEnd.GetDayInteger())
			{
				vcNext.InitWeekDay();
				ndst = is_daylight_time2(vcNext, loc.m_nDST);
				inEvents.AddEvent(vcNext, CCTYPE_SANK, nData, ndst);
			}
			else
			{
				break;
			}
			vcAdd = vcNext;
			vcAdd.NextDay();
		}
	}

	if (fOptions & CCE_CNJ)
	{
		double dlong;
		vcAdd = vc;
		vcAdd.shour = 0.0;
		while(vcAdd.IsBeforeThis(vcEnd))
		{
			dlong = GetNextConjunction(vcAdd, vcNext, true, earth);
			if (vcNext.GetDayInteger() < vcEnd.GetDayInteger())
			{
				vcNext.InitWeekDay();
				ndst = is_daylight_time2(vcNext, loc.m_nDST);
				inEvents.AddEvent(vcNext, CCTYPE_CONJ, GetRasi(dlong, GetAyanamsa(vcNext.GetJulianComplete())), ndst);
			}
			else
			{
				break;
			}
			vcAdd = vcNext;
			vcAdd.NextDay();
		}
	}
	
	if (fOptions & CCE_SORT)
		inEvents.Sort(true);
	else
		inEvents.b_sorted = false;
}

int FormatEventsText(TResultEvents &inEvents, TString &res)
{

	unsigned int i;
	TString str, temp;

	res.Format("Events from %d %s %d to %d %s %d.\r\n\r\n", 
		inEvents.m_vcStart.day,
		AvcGetMonthAbr(inEvents.m_vcStart.month),
		inEvents.m_vcStart.year,
		inEvents.m_vcEnd.day,
		AvcGetMonthAbr(inEvents.m_vcEnd.month),
		inEvents.m_vcEnd.year);

	res += inEvents.m_location.m_strFullName;
	res += "\r\n\r\n";

	VCTIME prevd;
	int prevt = -1;

	prevd.day = 0;
	prevd.month = 0;
	prevd.year = 0;
	for(i = 0; i < inEvents.n_count; i++)
	{
		TDayEvent & dnr = inEvents[i];

		if (inEvents.b_sorted)
		{
			if (prevd.day != dnr.Time.day || prevd.month != dnr.Time.month || prevd.year != dnr.Time.year)
			{
				str.Format("\r\n ===========  %d %s %d  ==========================================\r\n\r\n", dnr.Time.day, AvcGetMonthAbr(dnr.Time.month), dnr.Time.year);
				res += str;
			}
			prevd = dnr.Time;
		}
		else
		{
			if (prevt != dnr.nType)
			{
				switch(dnr.nType)
				{
				case 10:
				case 11:
				case 12:
				case 13:
					if (prevt < 10 || prevt >= 14)
					{
						res += "\r\n ========== SUNRISE, SUNSET ==========================================\r\n\r\n";
					}
					break;
				case 20:
					res += "\r\n ========== TITHIS ===================================================\r\n\r\n";
					break;
				case 21:
					res += "\r\n ========== NAKSATRAS ================================================\r\n\r\n";
					break;
				case 22:
					res += "\r\n ========== SANKRANTIS ===============================================\r\n\r\n";
					break;
				case 23:
					res += "\r\n ========== SUN-MOON CONJUNCTIONS ====================================\r\n\r\n";
					break;
				}
			}
			prevt = dnr.nType;
		}

		switch(dnr.nType)
		{
		case 10:
			res += "            ";
			res += dnr.Time.c_str();
			res += " ";
			res += AvcGetDSTSignature(dnr.nDst);
			res += "   arunodaya\r\n";
			break;
		case 11:
			res += "            ";
			res += dnr.Time.c_str();
			res += " ";
			res += AvcGetDSTSignature(dnr.nDst);
			res += "   sunrise\r\n";
			break;
		case 12:
			res += "            ";
			res += dnr.Time.c_str();
			res += " ";
			res += AvcGetDSTSignature(dnr.nDst);
			res += "   noon\r\n";
			break;
		case 13:
			res += "            ";
			res += dnr.Time.c_str();
			res += " ";
			res += AvcGetDSTSignature(dnr.nDst);
			res += "   sunset\r\n";
			break;
		case 20:
			res += "            ";
			res += dnr.Time.c_str();
			res += " ";
			res += AvcGetDSTSignature(dnr.nDst);
			res += "   ";
			res += GetTithiName(dnr.nData);
			res += " Tithi starts";
			res += "\r\n";
			break;
		case 21:
			res += "            ";
			res += dnr.Time.c_str();
			res += " ";
			res += AvcGetDSTSignature(dnr.nDst);
			res += "   ";
			res += GetNaksatraName(dnr.nData);
			res += " Naksatra starts";
			res += "\r\n";
			break;
		case 22:
			res += "            ";
			res += dnr.Time.c_str();
			res += " ";
			res += AvcGetDSTSignature(dnr.nDst);
			res += "   ";
			res += GetSankrantiName(dnr.nData);
			res += " Sankranti";
			res += "\r\n";
			break;
		case 23:
			res += "            ";
			res += dnr.Time.c_str();
			res += " ";
			res += AvcGetDSTSignature(dnr.nDst);
			res += "   conjunction in ";
			res += GetSankrantiName(dnr.nData);
			res += " rasi";
			res += "\r\n";
			break;
		default:
			break;
		}
	}

	res += "\r\n";

	return 1;
}

int FormatEventsXML(TResultEvents &inEvents, TString &strXml)
{

	unsigned int i;
	TString str, temp;

	strXml.Format("<xml>\r\n<program version=\"%s\">\r\n<location longitude=\"%f\" latitude=\"%f\" timezone=\"%f\" dst=\"%s\" />\n"
		, gstr[130].c_str(), inEvents.m_location.m_fLongitude, inEvents.m_location.m_fLatitude
		, inEvents.m_location.m_fTimezone, TTimeZone::GetTimeZoneName(inEvents.m_location.m_nDST));
	VCTIME prevd;
	int prevt = -1;

	prevd.day = 0;
	prevd.month = 0;
	prevd.year = 0;
	for(i = 0; i < inEvents.n_count; i++)
	{
		TDayEvent & dnr = inEvents[i];

		if (inEvents.b_sorted)
		{
			if (prevd.day != dnr.Time.day || prevd.month != dnr.Time.month || prevd.year != dnr.Time.year)
			{
				str.Format("\t<day date=\"%d/%d/%d\" />\n", dnr.Time.day, dnr.Time.month, dnr.Time.year);
				strXml += str;
			}
			prevd = dnr.Time;
		}

		switch(dnr.nType)
		{
		case 10:
			str.Format("\t<event type=\"arunodaya\" time=\"%02d:%02d:%02d\" dst=\"%d\" />\n", dnr.Time.GetHour(), dnr.Time.GetMinute(), dnr.Time.GetSecond(), dnr.nDst);
			strXml += str;
			break;
		case 11:
			str.Format("\t<event type=\"sunrise\" time=\"%02d:%02d:%02d\" dst=\"%d\" />\n", dnr.Time.GetHour(), dnr.Time.GetMinute(), dnr.Time.GetSecond(), dnr.nDst);
			strXml += str;
			break;
		case 12:
			str.Format("\t<event type=\"noon\" time=\"%02d:%02d:%02d\" dst=\"%d\" />\n", dnr.Time.GetHour(), dnr.Time.GetMinute(), dnr.Time.GetSecond(), dnr.nDst);
			strXml += str;
			break;
		case 13:
			str.Format("\t<event type=\"sunset\" time=\"%02d:%02d:%02d\" dst=\"%d\" />\n", dnr.Time.GetHour(), dnr.Time.GetMinute(), dnr.Time.GetSecond(), dnr.nDst);
			strXml += str;
			break;
		case 20:
			str.Format("\t<event type=\"%s Tithi\" time=\"%02d:%02d:%02d\" dst=\"%d\" />\n", GetTithiName(dnr.nData)
				, dnr.Time.GetHour(), dnr.Time.GetMinute(), dnr.Time.GetSecond(), dnr.nDst);
			strXml += str;
			break;
		case 21:
			str.Format("\t<event type=\"%s Naksatra\" time=\"%02d:%02d:%02d\" dst=\"%d\" />\n", GetNaksatraName(dnr.nData)
				, dnr.Time.GetHour(), dnr.Time.GetMinute(), dnr.Time.GetSecond(), dnr.nDst);
			strXml += str;
			break;
		case 22:
			str.Format("\t<event type=\"%s Sankranti\" time=\"%02d:%02d:%02d\" dst=\"%d\" />\n", GetSankrantiName(dnr.nData)
				, dnr.Time.GetHour(), dnr.Time.GetMinute(), dnr.Time.GetSecond(), dnr.nDst);
			strXml += str;
			break;
		case 23:
			str.Format("\t<event type=\"conjunction in %s rasi\" time=\"%02d:%02d:%02d\" dst=\"%d\" />\n", GetSankrantiName(dnr.nData)
				, dnr.Time.GetHour(), dnr.Time.GetMinute(), dnr.Time.GetSecond(), dnr.nDst);
			strXml += str;
			break;
		default:
			break;
		}
	}

	strXml += "</xml>\n";

	return 1;
}

int FormatEventsRtf(TResultEvents &inEvents, TString &res)
{
	unsigned int i;
	TString str, temp;

	str = "";
	AppendRtfHeader(res);

	str.Format("{\\fs%d\\f2 Events}\\par\\fs%d\\f2 from %d %s %d to %d %s %d.\\par \r\n\r\n", 
		g_Header2Size, g_TextSize,
		inEvents.m_vcStart.day,
		AvcGetMonthAbr(inEvents.m_vcStart.month),
		inEvents.m_vcStart.year,
		inEvents.m_vcEnd.day,
		AvcGetMonthAbr(inEvents.m_vcEnd.month),
		inEvents.m_vcEnd.year);

	str += inEvents.m_location.m_strFullName;
	str += "\\par\r\n\\par\r\n";

	res += str;

	VCTIME prevd;
	int prevt = -1;

	prevd.day = 0;
	prevd.month = 0;
	prevd.year = 0;
	for(i = 0; i < inEvents.n_count; i++)
	{
		TDayEvent & dnr = inEvents[i];

		if (inEvents.b_sorted)
		{
			if (prevd.day != dnr.Time.day || prevd.month != dnr.Time.month || prevd.year != dnr.Time.year)
			{
				str.Format("\\par\r\n ===========  %d %s %d  ==========================================\\par\\par\r\n\r\n", dnr.Time.day, AvcGetMonthAbr(dnr.Time.month), dnr.Time.year);
				res += str;
			}
			prevd = dnr.Time;
		}
		else
		{
			if (prevt != dnr.nType)
			{
				switch(dnr.nType)
				{
				case 10:
				case 11:
				case 12:
				case 13:
					if (prevt < 10 || prevt >= 14)
					{
						res += "\\par\r\n ========== SUNRISE, SUNSET ==========================================\\par\r\n\\par\r\n";
					}
					break;
				case 20:
					res += "\\par\r\n ========== TITHIS ===================================================\\par\r\n\\par\r\n";
					break;
				case 21:
					res += "\\par\r\n ========== NAKSATRAS ================================================\\par\r\n\\par\r\n";
					break;
				case 22:
					res += "\\par\r\n ========== SANKRANTIS ===============================================\\par\r\n\\par\r\n";
					break;
				case 23:
					res += "\\par\r\n ========== SUN-MOON CONJUNCTIONS ====================================\\par\r\n\\par\r\n";
					break;
				}
			}
			prevt = dnr.nType;
		}

		switch(dnr.nType)
		{
		case 10:
			res += "            ";
			res += dnr.Time.c_str();
			res += " ";
			res += AvcGetDSTSignature(dnr.nDst);
			res += "   arunodaya\\par\r\n";
			break;
		case 11:
			res += "            ";
			res += dnr.Time.c_str();
			res += " ";
			res += AvcGetDSTSignature(dnr.nDst);
			res += "   sunrise\\par\r\n";
			break;
		case 12:
			res += "            ";
			res += dnr.Time.c_str();
			res += " ";
			res += AvcGetDSTSignature(dnr.nDst);
			res += "   noon\\par\r\n";
			break;
		case 13:
			res += "            ";
			res += dnr.Time.c_str();
			res += " ";
			res += AvcGetDSTSignature(dnr.nDst);
			res += "   sunset\\par\r\n";
			break;
		case 20:
			res += "            ";
			res += dnr.Time.c_str();
			res += " ";
			res += AvcGetDSTSignature(dnr.nDst);
			res += "   ";
			res += GetTithiName(dnr.nData);
			res += " Tithi starts";
			res += "\\par\r\n";
			break;
		case 21:
			res += "            ";
			res += dnr.Time.c_str();
			res += " ";
			res += AvcGetDSTSignature(dnr.nDst);
			res += "   ";
			res += GetNaksatraName(dnr.nData);
			res += " Naksatra starts";
			res += "\\par\r\n";
			break;
		case 22:
			res += "            ";
			res += dnr.Time.c_str();
			res += " ";
			res += AvcGetDSTSignature(dnr.nDst);
			res += "   ";
			res += GetSankrantiName(dnr.nData);
			res += " Sankranti";
			res += "\\par\r\n";
			break;
		case 23:
			res += "            ";
			res += dnr.Time.c_str();
			res += " ";
			res += AvcGetDSTSignature(dnr.nDst);
			res += "   conjunction in ";
			res += GetSankrantiName(dnr.nData);
			res += " rasi";
			res += "\\par\r\n";
			break;
		default:
			break;
		}
	}

	res += "\\par\r\n";

	AddNoteRtf(res);

	res += "}\r\n";


	return 1;
}

void time_print(TString &str, DAYTIME dt)
{
	str.Format("%02d:%02d:%02d", dt.hour, dt.min, dt.sec);
}

void AddNoteRtf(TString &str)
{
	str += "\\par\\par{\\fs16\\cf10\r\n";
	str += gpszSeparator;
	str += "\\par {\\b Notes:}\\par\\pard\r\n\r\n";
	str += "\\tab DST - Time is in \'Daylight Saving Time\'\\par\r\n\\tab LT  - Time is in \'Local Time\'\\par\r\n";

	if (GetShowSetVal(9) > 0 || GetShowSetVal(10) > 0 || GetShowSetVal(11) > 0 || GetShowSetVal(12) > 0)
	{
		str += "\\tab (*) - value at the moment of sunrise\\par\r\n";
	}

	// last line
	str += "\\par\r\n\\tab Generated by ";
	str += gstr[131];
	str += "}\r\n";

}

void AddListText(TString &text, const char *pText)
{
	TString str;
	str.Format("                 %s\r\n", pText);
	str.TrimRight();
	str+= "\r\n";
	text += str;
}

void AddListRtf(TString &text, const char *pText)
{
	text += "\\par\\tab ";
	text += pText;
}

void AddListText(TString &text, const char *pText, const char * pText2)
{
	TString str;
	str.Format("%-17s%s", pText, pText2);
	str.TrimRight();
	str+= "\r\n";
	text += str;
}

void AddListRtf(TString &text, const char *pText, const char * pText2)
{
	TString str;
	str.Format("\\par %s\\tab %s", pText, pText2);
	text += str;
}

DlgCalcProgress dcp;

int AvcProgressWindowCreate()
{
	dcp.Create(IDD_CALC_PROGRESS, AfxGetMainWnd());
	dcp.CenterWindow();
	dcp.ShowWindow(SW_SHOW);
	dcp.UpdateWindow();

	return 0;
}

int AvcProgressWindowSetRange(int nMin, int nMax)
{
	dcp.m_p1.SetRange32(nMin, nMax);

	return 0;
}

int AvcProgressWindowSetPos(int nPos)
{
	dcp.m_p1.SetPos(nPos);

	return 0;
}

int AvcProgressWindowClose()
{
	dcp.DestroyWindow();

	return 0;
}

int CalcCalendar(TResultCalendar &daybuff, CLocationRef & loc, VCTIME date, int nDaysCount) 
{
	TString str, str2, str3, dayText;

	char * spaces = "                                                                                ";
	int lastmasa = -1;
	int lastmonth = -1;
	bool bCalcMoon = (GetShowSetVal(4) > 0 || GetShowSetVal(5) > 0);

	DlgCalcProgress dcp;

	dcp.Create(IDD_CALC_PROGRESS, AfxGetMainWnd());
	dcp.CenterWindow();
	dcp.ShowWindow(SW_SHOW);
	dcp.UpdateWindow();

	daybuff.m_pProgress = &(dcp.m_p1);

	if (daybuff.CalculateCalendar(loc, date, nDaysCount) == 0)
		return 0;

	daybuff.m_pProgress = NULL;

//	AvcGetOldCalendarText(daybuff, m_text);


/*	for (k = 0; k < nDaysCount; k++)
	{
		date.shour = 0.0;
		date.TimeZone = earth.tzone;

		prevd = daybuff.GetDay(k - 1);
		pvd = daybuff.GetDay(k);
		nextd = daybuff.GetDay(k + 1);

		if (bCalcMoon)
		{
			dcp.m_p1.SetPos(int(90.8 + 9.2 * k / nDaysCount));
		}
		else
		{
			rate = double(k) / nDaysCount;
			dcp.m_p1.SetPos(int(58.8 + 41.2 * rate * rate));
		}

		if (pvd)
		{
			if ((GetShowSetVal(18) == 1) && (pvd->astrodata.nMasa != lastmasa))
			{
				m_text += "\r\n";
				str.Format("%s %s, Gaurabda %d", GetMasaName(pvd->astrodata.nMasa), gstr[22], pvd->astrodata.nGaurabdaYear);
				tp1 = (80 - str.GetLength())/2;
				str.Insert(0, (spaces + (79 - tp1)));
				str += spaces;
				str.Insert(80 - _tcslen(AvcGetVersionText()), AvcGetVersionText());
				m_text += str.Left(80);
				m_text += "\r\n";
				if ((pvd->astrodata.nMasa == ADHIKA_MASA) && ((lastmasa >= SRIDHARA_MASA) && (lastmasa <= DAMODARA_MASA)))
				{
					AddListText(m_text, gstr[128]);
				}
				m_text += "\r\n";
				m_text += (spaces + (79 - (80 - location_info.GetLength())/2));
				m_text += location_info;

				m_text += "\r\n\r\n";
				m_text += " DATE            TITHI                         PAKSA YOGA      NAKSATRA       FAST\r\n";
				m_text += gpszSeparator;
				m_text += "\r\n";
				lastmasa = pvd->astrodata.nMasa;
			}

			if ((GetShowSetVal(19) == 1) && (pvd->date.month != lastmonth))
			{
				m_text += "\r\n";
				str.Format("%s %d", gstr[759 + pvd->date.month], pvd->date.year);
				tp1 = (80 - str.GetLength())/2;
				str.Insert(0, (spaces + (79 - tp1)));
				str += spaces;
				str.Insert(80 - _tcslen(AvcGetVersionText()), AvcGetVersionText());
				m_text += str.Left(80);
				m_text += "\r\n";
				m_text += (spaces + (79 - (80 - location_info.GetLength())/2));
				m_text += location_info;

				m_text += "\r\n\r\n";
				m_text += " DATE            TITHI                         PAKSA YOGA      NAKSATRA       FAST\r\n";
				m_text += gpszSeparator;
				m_text += "\r\n";
				lastmonth = pvd->date.month;
			}

			dayText.Empty();
			pvd->GetTextA(str);
			str2 = str.Mid(16);
			str = str.Left(15);
			if (pvd->astrodata.sun.longitude_deg < 0.0)
			{
				AddListText(dayText, str, "No rise and no set of the sun. No calendar information.");
				goto _resolve_text;
			}
			AddListText(dayText, str, str2);

			if (GetShowSetVal(17) == 1)
			{
				if (pvd->ekadasi_parana)
				{
					pvd->GetTextEP(str);
					str.Delete(0, 17);
					AddListText(dayText, str);
				}
			}

			if (GetShowSetVal(6) == 1)
			{
				if (pvd->festivals)
				{
					int i = pvd->GetHeadFestival();
					while(pvd->GetNextFestival(i, str2))
					{
						if (str2.GetLength() > 1)
							AddListText(dayText, str2);
					}
				}
			}

			if (GetShowSetVal(16) == 1 && pvd->sankranti_zodiac >= 0)
			{
				double h1, m1;
				m1 = modf(pvd->sankranti_day.shour*24, &h1);
				str.Format(" %s %s (%s %s %s %d %s, %02d:%02d %s) "
					, GetSankrantiName(pvd->sankranti_zodiac)
					, gstr[56]
					, gstr[111], GetSankrantiNameEn(pvd->sankranti_zodiac)
					, gstr[852]
					, pvd->sankranti_day.day, AvcGetMonthAbr(pvd->sankranti_day.month)
					, int(h1), int(m1*60)
					, AvcGetDSTSignature(pvd->nDST));
				int length = str.GetLength();
				int seplen = _tcslen(gpszSeparator);
				length = (seplen - length) / 2;
				dayText += (gpszSeparator + (seplen - length));
				dayText += str;
				dayText += (gpszSeparator + (seplen - length));
				dayText += "\r\n";
			}

			if (GetShowSetVal(7) == 1 && pvd->was_ksaya)//(m_dshow.m_info_ksaya) && (pvd->was_ksaya))
			{
				double h, m;
				VAISNAVADAY * p;


				if (pvd->ksaya_time1 < 0.0)
					m = modf(fabs(1.0 + pvd->ksaya_time1)*24, &h);
				else
					m = modf(pvd->ksaya_time1*24, &h);
				p = (pvd->ksaya_time1 < 0.0) ? prevd : pvd;
				str2.Format("%d %s, %02d:%02d", p->date.day, AvcGetMonthAbr(p->date.month), int(h), int(m*60));

				if (pvd->ksaya_time2 < 0.0)
					m = modf(fabs(1.0 + pvd->ksaya_time2)*24, &h);
				else
					m = modf(pvd->ksaya_time2*24, &h);
				p = (pvd->ksaya_time2 < 0.0) ? prevd : pvd;
				str3.Format("%d %s, %02d:%02d", p->date.day, AvcGetMonthAbr(p->date.month), int(h), int(m*60));

				str.Format("%s %s %s %s %s (%s)", gstr[89], gstr[850], str2, gstr[851], str3, AvcGetDSTSignature(pvd->nDST));
				AddListText(dayText, str);
			}

			if (GetShowSetVal(8) == 1)//(m_dshow.m_info_vriddhi) && (pvd->is_vriddhi))
			{
				if (pvd->is_vriddhi)
					AddListText(dayText, gstr[90]);
			}

			if (pvd->nCaturmasya & CMASYA_CONT_MASK)
			{
				int n = ((pvd->nCaturmasya & CMASYA_CONT_MASK) >> 22);
				AddListText(dayText, gstr[ 111 + n ]);
			}

			if ((GetShowSetVal(13) == 1) && (pvd->nCaturmasya & CMASYA_PURN_MASK))
			{
				str.Format("%s [PURNIMA SYSTEM]"
					, gstr[107 + (pvd->nCaturmasya & CMASYA_PURN_MASK_DAY)
					           + ((pvd->nCaturmasya & CMASYA_PURN_MASK_MASA) >> 2)]
					);
				AddListText(dayText, str);
				if ((pvd->nCaturmasya & CMASYA_PURN_MASK_DAY) == 0x1)
				{
					AddListText(dayText, gstr[110 + ((pvd->nCaturmasya & CMASYA_PURN_MASK_MASA) >> 2)] );
				}
			}

			if ((GetShowSetVal(14) == 1) && (pvd->nCaturmasya & CMASYA_PRAT_MASK))
			{
				str.Format("%s [PRATIPAT SYSTEM]"
					, gstr[107 + ((pvd->nCaturmasya & CMASYA_PRAT_MASK_DAY) >> 8)
					           + ((pvd->nCaturmasya & CMASYA_PRAT_MASK_MASA) >> 10)]
					);
				AddListText(dayText, str);
				if ((pvd->nCaturmasya & CMASYA_PRAT_MASK_DAY) == 0x100)
				{
					AddListText(dayText, gstr[110 + ((pvd->nCaturmasya & CMASYA_PRAT_MASK_MASA) >> 10)] );
				}
			}

			if ((GetShowSetVal(15) == 1) && (pvd->nCaturmasya & CMASYA_EKAD_MASK))
			{
				str.Format("%s [EKADASI SYSTEM]"
					, gstr[107 + ((pvd->nCaturmasya & CMASYA_EKAD_MASK_DAY) >> 16)
					           + ((pvd->nCaturmasya & CMASYA_EKAD_MASK_MASA) >> 18)]
					);
				AddListText(dayText, str);
				if ((pvd->nCaturmasya & CMASYA_EKAD_MASK_DAY) == 0x10000)
				{
					AddListText(dayText, gstr[110 + ((pvd->nCaturmasya & CMASYA_EKAD_MASK_MASA) >> 18)] );
				}
			}

			// tithi at arunodaya
			if (GetShowSetVal(0) == 1)//m_dshow.m_tithi_arun)
			{
				str.Format("%s: %s", gstr[98], GetTithiName(pvd->astrodata.nTithiArunodaya));
				AddListText(dayText, str);
			}

			//"Arunodaya Time",//1
			if (GetShowSetVal(1) == 1)//m_dshow.m_arunodaya)
			{
				str.Format("%s %d:%02d (%s)", gstr[99], pvd->astrodata.sun.arunodaya.hour
					, pvd->astrodata.sun.arunodaya.min, AvcGetDSTSignature(pvd->nDST));
				AddListText(dayText, str);
			}
			//"Sunrise Time",//2
			//"Sunset Time",//3
			if (GetShowSetVal(2) == 1)//m_dshow.m_sunrise)
			{
				str.Format("%s %d:%02d (%s)", gstr[51], pvd->astrodata.sun.rise.hour
					, pvd->astrodata.sun.rise.min, AvcGetDSTSignature(pvd->nDST));
				AddListText(dayText, str);
			}
			if (GetShowSetVal(3) == 1)//m_dshow.m_sunset)
			{
				str.Format("%s %d:%02d (%s)", gstr[52], pvd->astrodata.sun.set.hour
					, pvd->astrodata.sun.set.min, AvcGetDSTSignature(pvd->nDST));
				AddListText(dayText, str);

			}
			//"Moonrise Time",//4
			if (GetShowSetVal(4) == 1)
			{
				if (pvd->moonrise.hour < 0)
					str = gstr[136];
				else
				{
					str.Format("%s %d:%02d (%s)", gstr[53], pvd->moonrise.hour
						, pvd->moonrise.min, AvcGetDSTSignature(pvd->nDST));
				}
				AddListText(dayText, str);
			}
			//"Moonset Time",//5
			if (GetShowSetVal(5) == 1)
			{
				if (pvd->moonrise.hour < 0)
					str = gstr[137];
				else
				{
					str.Format("%s %d:%02d (%s)", gstr[54], pvd->moonset.hour
						, pvd->moonset.min, AvcGetDSTSignature(pvd->nDST));
				}
				AddListText(dayText, str);
			}
			///"Sun Longitude",//9
			if (GetShowSetVal(9) == 1)//m_dshow.m_sun_long)
			{
				str.Format("%s: %f", gstr[100], pvd->astrodata.sun.longitude_deg);
				AddListText(dayText, str);
			}
			//"Moon Longitude",//10
			if (GetShowSetVal(10) == 1)//m_dshow.m_sun_long)
			{
				str.Format("%s: %f", gstr[101], pvd->astrodata.moon.longitude_deg);
				AddListText(dayText, str);
			}
			//"Ayanamsha value",//11
			if (GetShowSetVal(11) == 1)//m_dshow.m_sun_long)
			{
				str.Format("%s %f (%s)", gstr[102], pvd->astrodata.msAyanamsa, GetAyanamsaName(GetAyanamsaType()));
				AddListText(dayText, str);
			}
			//"Julian Day",//12
			if (GetShowSetVal(12) == 1)//m_dshow.m_sun_long)
			{
				str.Format("%s %f", gstr[103], pvd->astrodata.jdate);
				AddListText(dayText, str);
			}

			if (GetShowSetVal(21) == 1)
			{
				if (prevd != NULL)
				{
					if (prevd->astrodata.nMasa != pvd->astrodata.nMasa)
					{
						str.Format("%s %s %s", gstr[780], GetMasaName(pvd->astrodata.nMasa), gstr[22]);
						AddListText(dayText, str);
					}
				}
				if (nextd != NULL)
				{
					if (nextd->astrodata.nMasa != pvd->astrodata.nMasa)
					{
						str.Format("%s %s %s", gstr[781], GetMasaName(pvd->astrodata.nMasa), gstr[22]);
						AddListText(dayText, str);
					}
				}
			}

		_resolve_text:
			if (GetShowSetVal(20) == 0)
				m_text += dayText;
			else if (dayText.GetLength() > 90)
				m_text += dayText;


		}
		date.shour = 0;
		date.NextDay();
	}
*/
	dcp.DestroyWindow();

	return 1;
}

int AvcGetOldCalendarDayText(VAISNAVADAY * pvd, TString &dayText) 
{
	TString str, str2, str3;
	int nFestClass;

		dayText.Empty();
		/* BEGIN GCAL 1.4.3 */
		pvd->GetTextA(str, GetShowSetVal(39), GetShowSetVal(36), GetShowSetVal(37), GetShowSetVal(38), GetShowSetVal(41));
		/* END GCAL 1.4.3 */
		str.Mid(16, str.GetLength(), str2);
		str.Left(15, str3);
		str = str3;
		if (pvd->astrodata.sun.longitude_deg < 0.0)
		{
			AddListText(dayText, str, "No rise and no set of the sun. No calendar information.");
			return 1;
		}
		AddListText(dayText, str, str2);

		if (GetShowSetVal(17) == 1)
		{
			if (pvd->ekadasi_parana)
			{
				pvd->GetTextEP(str);
				str.Delete(0, 17);
				AddListText(dayText, str);
			}
		}

		if (GetShowSetVal(6) == 1)
		{
			if (pvd->festivals.GetLength() > 0)
			{
				int i = pvd->GetHeadFestival();
				while(pvd->GetNextFestival(i, str2))
				{
					if (str2.GetLength() > 1)
					{
						nFestClass = pvd->GetFestivalClass(str2);
						if (nFestClass < 0 || GetShowSetVal(22 + nFestClass) == 1)
							AddListText(dayText, str2);
					}
				}
			}
		}

		if (GetShowSetVal(16) == 1 && pvd->sankranti_zodiac >= 0)
		{
			//double h1, m1;
			//m1 = modf(pvd->sankranti_day.shour*24, &h1);
			str.Format(" %s %s (%s %s %s %d %s, %02d:%02d %s) "
				, GetSankrantiName(pvd->sankranti_zodiac)
				, gstr[56].c_str()
				, gstr[111].c_str(), GetSankrantiNameEn(pvd->sankranti_zodiac)
				, gstr[852].c_str()
				, pvd->sankranti_day.day, AvcGetMonthAbr(pvd->sankranti_day.month)
				, pvd->sankranti_day.GetHour(), pvd->sankranti_day.GetMinuteRound()
				, AvcGetDSTSignature(pvd->nDST));
			int length = str.GetLength();
			int seplen = _tcslen(gpszSeparator);
			length = (seplen - length) / 2;
			dayText += (gpszSeparator + (seplen - length));
			dayText += str;
			dayText += (gpszSeparator + (seplen - length));
			dayText += "\r\n";
		}

		if (GetShowSetVal(7) == 1 && pvd->was_ksaya)//(m_dshow.m_info_ksaya) && (pvd->was_ksaya))
		{
			double h, m;
			VCTIME ksayaDate;

			// zaciatok ksaya tithi
			m = modf(pvd->ksaya_time1*24, &h);
			ksayaDate = pvd->date;
			if (pvd->ksaya_day1 < 0.0)
				ksayaDate.PreviousDay();
			str2.Format("%d %s %02d:%02d", ksayaDate.day, AvcGetMonthAbr(ksayaDate.month), int(h), int(m*60));

			// end of ksaya tithi
			m = modf(pvd->ksaya_time2*24, &h);
			ksayaDate = pvd->date;
			if (pvd->ksaya_day2 < 0.0)
				ksayaDate.PreviousDay();
			str3.Format("%d %s %02d:%02d", ksayaDate.day, AvcGetMonthAbr(ksayaDate.month), int(h), int(m*60));

			// print info
			str.Format("%s: %s -- %s %s %s (%s)", gstr[89].c_str(), GetTithiName((pvd->astrodata.nTithi + 29)%30), str2.c_str(), gstr[851].c_str(), str3.c_str(), AvcGetDSTSignature(pvd->nDST));
			//str.Format("%s %s %s %s %s (%s)", gstr[89].c_str(), gstr[850].c_str(), str2.c_str(), gstr[851].c_str(), str3.c_str(), AvcGetDSTSignature(pvd->nDST));
			AddListText(dayText, str);
		}

		if (GetShowSetVal(8) == 1)//(m_dshow.m_info_vriddhi) && (pvd->is_vriddhi))
		{
			if (pvd->is_vriddhi)
				AddListText(dayText, gstr[90]);
		}

		if (pvd->nCaturmasya & CMASYA_CONT_MASK)
		{
			int n = ((pvd->nCaturmasya & CMASYA_CONT_MASK) >> 22);
			AddListText(dayText, gstr[ 111 + n ]);
		}

		if ((GetShowSetVal(13) == 1) && (pvd->nCaturmasya & CMASYA_PURN_MASK))
		{
			str.Format("%s [PURNIMA SYSTEM]"
				, gstr[107 + (pvd->nCaturmasya & CMASYA_PURN_MASK_DAY)
					       + ((pvd->nCaturmasya & CMASYA_PURN_MASK_MASA) >> 2)].c_str()
				);
			AddListText(dayText, str);
			if ((pvd->nCaturmasya & CMASYA_PURN_MASK_DAY) == 0x1)
			{
				AddListText(dayText, gstr[110 + ((pvd->nCaturmasya & CMASYA_PURN_MASK_MASA) >> 2)].c_str() );
			}
		}

		if ((GetShowSetVal(14) == 1) && (pvd->nCaturmasya & CMASYA_PRAT_MASK))
		{
			str.Format("%s [PRATIPAT SYSTEM]"
				, gstr[107 + ((pvd->nCaturmasya & CMASYA_PRAT_MASK_DAY) >> 8)
					       + ((pvd->nCaturmasya & CMASYA_PRAT_MASK_MASA) >> 10)].c_str()
				);
			AddListText(dayText, str);
			if ((pvd->nCaturmasya & CMASYA_PRAT_MASK_DAY) == 0x100)
			{
				AddListText(dayText, gstr[110 + ((pvd->nCaturmasya & CMASYA_PRAT_MASK_MASA) >> 10)].c_str() );
			}
		}

		if ((GetShowSetVal(15) == 1) && (pvd->nCaturmasya & CMASYA_EKAD_MASK))
		{
			str.Format("%s [EKADASI SYSTEM]"
				, gstr[107 + ((pvd->nCaturmasya & CMASYA_EKAD_MASK_DAY) >> 16)
					       + ((pvd->nCaturmasya & CMASYA_EKAD_MASK_MASA) >> 18)].c_str()
				);
			AddListText(dayText, str);
			if ((pvd->nCaturmasya & CMASYA_EKAD_MASK_DAY) == 0x10000)
			{
				AddListText(dayText, gstr[110 + ((pvd->nCaturmasya & CMASYA_EKAD_MASK_MASA) >> 18)].c_str() );
			}
		}

		// tithi at arunodaya
		if (GetShowSetVal(0) == 1)//m_dshow.m_tithi_arun)
		{
			str.Format("%s: %s", gstr[98].c_str(), GetTithiName(pvd->astrodata.nTithiArunodaya));
			AddListText(dayText, str);
		}

		//"Arunodaya Time",//1
		if (GetShowSetVal(1) == 1)//m_dshow.m_arunodaya)
		{
			str.Format("%s %d:%02d (%s)", gstr[99].c_str(), pvd->astrodata.sun.arunodaya.hour
				, pvd->astrodata.sun.arunodaya.min, AvcGetDSTSignature(pvd->nDST));
			AddListText(dayText, str);
		}
		//"Sunrise Time",//2
		//"Sunset Time",//3
		if (GetShowSetVal(2) == 1)//m_dshow.m_sunrise)
		{
			str.Format("%s %d:%02d (%s)", gstr[51].c_str(), pvd->astrodata.sun.rise.hour
				, pvd->astrodata.sun.rise.min, AvcGetDSTSignature(pvd->nDST));
			AddListText(dayText, str);
		}
		/* BEGIN GCAL 1.4.3 */
		// Noon time
		if (GetShowSetVal(34) == 1)//m_dshow.m_sunset)
		{
			str.Format("%s %d:%02d (%s)", gstr[857].c_str(), pvd->astrodata.sun.noon.hour
				, pvd->astrodata.sun.noon.min, AvcGetDSTSignature(pvd->nDST));
			AddListText(dayText, str);
		}
		/* END GCAL 1.4.3 */
		if (GetShowSetVal(3) == 1)//m_dshow.m_sunset)
		{
			str.Format("%s %d:%02d (%s)", gstr[52].c_str(), pvd->astrodata.sun.set.hour
				, pvd->astrodata.sun.set.min, AvcGetDSTSignature(pvd->nDST));
			AddListText(dayText, str);
		}
		//"Moonrise Time",//4
		if (GetShowSetVal(4) == 1)
		{
			if (pvd->moonrise.hour < 0)
				str = gstr[136].c_str();
			else
			{
				str.Format("%s %d:%02d (%s)", gstr[53].c_str(), pvd->moonrise.hour
					, pvd->moonrise.min, AvcGetDSTSignature(pvd->nDST));
			}
			AddListText(dayText, str);
		}
		//"Moonset Time",//5
		if (GetShowSetVal(5) == 1)
		{
			if (pvd->moonrise.hour < 0)
				str = gstr[137];
			else
			{
				str.Format("%s %d:%02d (%s)", gstr[54].c_str(), pvd->moonset.hour
					, pvd->moonset.min, AvcGetDSTSignature(pvd->nDST));
			}
			AddListText(dayText, str);
		}
		///"Sun Longitude",//9
		if (GetShowSetVal(9) == 1)//m_dshow.m_sun_long)
		{
			str.Format("%s: %f (*)", gstr[100].c_str(), pvd->astrodata.sun.longitude_deg);
			AddListText(dayText, str);
		}
		//"Moon Longitude",//10
		if (GetShowSetVal(10) == 1)//m_dshow.m_sun_long)
		{
			str.Format("%s: %f (*)", gstr[101].c_str(), pvd->astrodata.moon.longitude_deg);
			AddListText(dayText, str);
		}
		//"Ayanamsha value",//11
		if (GetShowSetVal(11) == 1)//m_dshow.m_sun_long)
		{
			str.Format("%s %f (%s) (*)", gstr[102].c_str(), pvd->astrodata.msAyanamsa, GetAyanamsaName(GetAyanamsaType()));
			AddListText(dayText, str);
		}
		//"Julian Day",//12
		if (GetShowSetVal(12) == 1)//m_dshow.m_sun_long)
		{
			str.Format("%s %f (*)", gstr[103].c_str(), pvd->astrodata.jdate);
			AddListText(dayText, str);
		}

	return 0;
}

int FormatCalendarOld(TResultCalendar &daybuff, TString &m_text) 
{
	int k, nMasaHeader;
	TString str, str2, str3, dayText;

	char * spaces = "                                                                                ";
	VAISNAVADAY * pvd, * prevd, *nextd;
	int lastmasa = -1;
	int lastmonth = -1;
	int tp1;
	double rate;
	DlgCalcProgress dcp;
	bool bCalcMoon = (GetShowSetVal(4) > 0 || GetShowSetVal(5) > 0);

	m_text.Empty();

	for (k = 0; k < daybuff.m_vcCount; k++)
	{

		prevd = daybuff.GetDay(k - 1);
		pvd = daybuff.GetDay(k);
		nextd = daybuff.GetDay(k + 1);

		if (daybuff.m_pProgress != NULL)
		{
			if (bCalcMoon)
			{
				daybuff.m_pProgress->SetPos(int(90.8 + 9.2 * k / daybuff.m_vcCount));
			}
			else
			{
				rate = double(k) / daybuff.m_vcCount;
				daybuff.m_pProgress->SetPos(int(58.8 + 41.2 * rate * rate));
			}
		}

		if (pvd)
		{
			nMasaHeader = 0;
			if ((GetShowSetVal(18) == 1) && (pvd->astrodata.nMasa != lastmasa))
			{
				nMasaHeader = 1;
				m_text += "\r\n";
				str.Format("%s %s, Gaurabda %d", GetMasaName(pvd->astrodata.nMasa), gstr[22].c_str(), pvd->astrodata.nGaurabdaYear);
				tp1 = (80 - str.GetLength())/2;
				str.Insert(0, (spaces + (79 - tp1)));
				str += spaces;
				str.Insert(80 - _tcslen(AvcGetVersionText()), AvcGetVersionText());
				str.Left(80, str3);
				m_text += str3;
				m_text += "\r\n";
				if ((pvd->astrodata.nMasa == ADHIKA_MASA) && ((lastmasa >= SRIDHARA_MASA) && (lastmasa <= DAMODARA_MASA)))
				{
					AddListText(m_text, gstr[128]);
				}
				m_text += "\r\n";
				lastmasa = pvd->astrodata.nMasa;
			}

			if ((GetShowSetVal(19) == 1) && (pvd->date.month != lastmonth))
			{
				nMasaHeader = 1;
				m_text += "\r\n";
				str.Format("%s %d", gstr[759 + pvd->date.month].c_str(), pvd->date.year);
				tp1 = (80 - str.GetLength())/2;
				str.Insert(0, (spaces + (79 - tp1)));
				str += spaces;
				str.Insert(80 - _tcslen(AvcGetVersionText()), AvcGetVersionText());
				str.Left(80, str3);
				m_text += str3;
				m_text += "\r\n";
				lastmonth = pvd->date.month;
			}
			if (nMasaHeader)
			{
				m_text += (spaces + (79 - (80 - daybuff.m_Location.m_strFullName.GetLength())/2));
				m_text += daybuff.m_Location.m_strFullName;

				m_text += "\r\n\r\n";
				/* BEGIN GCAL 1.4.3 */
				nMasaHeader = m_text.GetLength();
				m_text += " DATE            TITHI                         ";
				if (GetShowSetVal(39)) m_text += "PAKSA ";
				else m_text += "      ";
				if (GetShowSetVal(37)) m_text += "YOGA      ";
				if (GetShowSetVal(36)) m_text += "NAKSATRA       ";
				if (GetShowSetVal(38)) m_text += "FAST ";
				if (GetShowSetVal(41)) m_text += "RASI           ";
				nMasaHeader = m_text.GetLength() - nMasaHeader;
				m_text += "\r\n";
				/* END GCAL 1.4.3 */
				while(nMasaHeader > 0)
				{
					m_text += "----------";
					nMasaHeader -= 10;
				}
				nMasaHeader = 0;
				m_text += "\r\n";
			}

			if (AvcGetOldCalendarDayText(pvd, dayText) > 0)
				goto _resolve_text;

			if (GetShowSetVal(21) == 1)
			{
				if (prevd != NULL)
				{
					if (prevd->astrodata.nMasa != pvd->astrodata.nMasa)
					{
						str.Format("%s %s %s", gstr[780].c_str(), GetMasaName(pvd->astrodata.nMasa), gstr[22].c_str());
						AddListText(dayText, str);
					}
				}
				if (nextd != NULL)
				{
					if (nextd->astrodata.nMasa != pvd->astrodata.nMasa)
					{
						str.Format("%s %s %s", gstr[781].c_str(), GetMasaName(pvd->astrodata.nMasa), gstr[22].c_str());
						AddListText(dayText, str);
					}
				}
			}
			/* BEGIN GCAL 1.4.3 */
			if (GetShowSetVal(35) && prevd && nextd)
			{
				if (prevd->nDST == 0 && pvd->nDST==1)
					AddListText(dayText, gstr[855].c_str());
				else if (pvd->nDST==1 && nextd->nDST==0)
					AddListText(dayText, gstr[856].c_str());
			}

			/* END GCAL 1.4.3 */

		_resolve_text:
			if (GetShowSetVal(20) == 0)
				m_text += dayText;
			else if (dayText.GetLength() > 90)
				m_text += dayText;


		}
//		date.shour = 0;
//		date.NextDay();
	}

//	dcp.DestroyWindow();

	return 1;
}

int FormatCalendarICAL(TResultCalendar &daybuff, TString &m_text)
{
	int k, nFestClass;
	int initialLength = 0;
	int lastmasa = -1;
	int lastmonth = -1;
	int tzoffset = 0, tzoff;
	TString str, dayText, str2, str3;
	VAISNAVADAY * pvd, * prevd, * nextd;
	char * SPACE_BEFORE_LINE = " , ";
	VCTIME vc;
	CLocationRef &loc = daybuff.m_Location;

	SYSTEMTIME st;
	GetLocalTime(&st);

	m_text = "BEGIN:VCALENDAR\nVERSION:2.0\nX-WR-CALNAME:VAISNAVA\nPRODID:-//GBC Calendar Comitee//GCAL//EN\n";
	m_text += "X-WR-RELCALID:";
	str2.Format("%08d-%04d-%04d-%04d-%04d%08d", st.wYear + st.wMilliseconds, st.wDay * st.wDayOfWeek, st.wMonth,
		st.wHour, st.wMinute + st.wMilliseconds);
	m_text += str2;
	m_text += "\nX-WR-TIMEZONE:";

	m_text += TTimeZone::GetTimeZoneName(loc.m_nDST);
	m_text += "\n";

	m_text += "CALSCALE:GREGORIAN\nMETHOD:PUBLISH\n";
	m_text += "BEGIN:VTIMEZONE\nTZID:";
	m_text += TTimeZone::GetTimeZoneName(loc.m_nDST);
	str2.Format("\nLAST-MODIFIED:%04d%02d%02dT%02d%02d%02dZ", st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond);
	m_text += str2;

	tzoffset = int(TTimeZone::GetTimeZoneOffset(loc.m_nDST) * 60.0);
	tzoff = tzoffset + TTimeZone::GetTimeZoneBias(loc.m_nDST);

	if (TTimeZone::GetTimeZoneBias(loc.m_nDST) > 0)
	{
		TTimeZone::GetDaylightTimeStartDate(loc.m_nDST, st.wYear, vc);
		str2.Format("\nBEGIN:DAYLIGHT\nDTSTART:%04d%02d%02dT%02d0000", vc.year, vc.month, vc.day, vc.GetHour());
		m_text += str2;

		str2.Format("\nTZOFFSETTO:%c%02d%02d", (tzoff > 0 ? '+' : '-'), abs(tzoff) / 60, abs(tzoff) % 60);
		m_text += str2;

		str2.Format("\nTZOFFSETFROM:%c%02d%02d", '+', 0, 0);
		m_text += str2;

		TTimeZone::GetNormalTimeStartDate(loc.m_nDST, st.wYear, vc);
		m_text += "\nEND:DAYLIGHT\nBEGIN:STANDARD\nDTSTART:";
		str2.Format("%04d%02d%02dT%02d0000", vc.year, vc.month, vc.day, vc.GetHour());
		m_text += str2;

		str2.Format("\nTZOFFSETTO:%c%02d%02d", (tzoffset > 0 ? '+' : '-'), abs(tzoffset)/60, abs(tzoffset) % 60);
		m_text += str2;
		str2.Format("\nTZOFFSETFROM:%c%02d%02d", (tzoff > 0 ? '+' : '-'), abs(tzoff) / 60, abs(tzoff) % 60);
		m_text += str2;
		m_text += "\nEND:STANDARD\n";
	}
	else
	{
		m_text += "\nBEGIN:STANDARD\nDTSTART:";
		str2.Format("%04d0101T000000", vc.year, vc.month, vc.day, vc.GetHour());
		m_text += str2;

		str.Format("\nTZOFFSETTO:%+02d%02d", tzoffset/60, abs(tzoffset) % 60);
		m_text += str2;
		str2.Format("\nTZOFFSETFROM:+0000");
		m_text += str2;
		m_text += "\nEND:STANDARD\n";
	}

	m_text += "END:VTIMEZONE\n";

	for (k = 0; k < daybuff.m_PureCount; k++)
	{
//		date.shour = 0.0;
//		date.TimeZone = earth.tzone;

		prevd = daybuff.GetDay(k - 1);
		pvd = daybuff.GetDay(k);
		nextd = daybuff.GetDay(k + 1);

		if (pvd)
		{
			dayText.Empty();

			if (pvd->astrodata.nMasa != lastmasa)
			{
				str.Format("%s %s, Gaurabda %d", GetMasaName(pvd->astrodata.nMasa), gstr[22].c_str(), pvd->astrodata.nGaurabdaYear);
				dayText += str;
				dayText += "\n";
				if ((pvd->astrodata.nMasa == ADHIKA_MASA) && ((lastmasa >= SRIDHARA_MASA) && (lastmasa <= DAMODARA_MASA)))
				{
					if (dayText.IsEmpty() == FALSE)
						dayText += SPACE_BEFORE_LINE;
					dayText += gstr[128];
					dayText += "\n";
				}

				lastmasa = pvd->astrodata.nMasa;
				initialLength = -1;
			}
			else
			{
				initialLength = 0;
			}

			if (dayText.IsEmpty() == FALSE)
				dayText += SPACE_BEFORE_LINE;
			dayText += GetTithiName(pvd->astrodata.nTithi);

			if ((pvd->astrodata.nTithi == 10) || (pvd->astrodata.nTithi == 25) || (pvd->astrodata.nTithi == 11) || (pvd->astrodata.nTithi == 26))
			{
				if (pvd->ekadasi_parana == false)
				{
					dayText += " ";
					if (pvd->nMhdType == EV_NULL)
					{
						dayText += gstr[58];
					}
					else
					{
						dayText += gstr[59];
					}
				}
			}
			dayText += "\n";
			initialLength += dayText.GetLength();

			if (pvd->astrodata.sun.longitude_deg < 0.0)
			{
				goto _resolve_text;
			}

//			if (GetShowSetVal(17) == 1)
			{
//				double h1, m1;
				if (pvd->ekadasi_parana)
				{
					pvd->GetTextEP(str);
					str.Delete(0, 17);
					dayText += SPACE_BEFORE_LINE;
					dayText += str;
					dayText += "\n";

/*					m_text += "BEGIN:VEVENT\n";
					if (pvd->eparana_time1 >= 0.0) {
						m1 = modf(pvd->eparana_time1 * 24.0, &h1) * 60;
						str2.Format("DTSTART;TZID=%s:%04d%02d%02dT%02d%02d00\n", TTimeZone::GetTimeZoneName(nDst),
							pvd->date.year, pvd->date.month, pvd->date.day, int(h1), int(m1));
					} else {
						str2.Format("DTSTART;TZID=%s:%04d%02d%02dT%000000\n", TTimeZone::GetTimeZoneName(nDst),
							pvd->date.year, pvd->date.month, pvd->date.day);
					}
					m_text += str2;
					if (pvd->eparana_time2 >= 0.0) {
						m1 = modf(pvd->eparana_time2 * 24.0, &h1) * 60;
						str2.Format("DTEND;TZID=%s:%04d%02d%02dT%02d%02d00\n", TTimeZone::GetTimeZoneName(nDst),
							pvd->date.year, pvd->date.month, pvd->date.day, int(h1), int(m1));
					} else {
						str2.Format("DTEND;TZID=%s:%04d%02d%02dT%235959\n", TTimeZone::GetTimeZoneName(nDst),
							pvd->date.year, pvd->date.month, pvd->date.day);
					}
					m_text += str2;
					m_text += "SUMMARY:";
					m_text += gstr[60];
					m_text += "\nSEQUENCE:1\nEND:VEVENT\n";
*/
				}
			}

//			if (GetShowSetVal(6) == 1)
			{
				if (pvd->festivals)
				{
					int i = pvd->GetHeadFestival();
					while(pvd->GetNextFestival(i, str2))
					{
						if (str2.GetLength() > 1)
						{
							nFestClass = pvd->GetFestivalClass(str2);
							if (nFestClass < 0 || GetShowSetVal(22 + nFestClass) == 1)
							{
								dayText += SPACE_BEFORE_LINE;
								dayText += str2;
								dayText += "\n";
							}
						}
					}
				}
			}

			if (/*GetShowSetVal(16) == 1 &&*/ pvd->sankranti_zodiac >= 0)
			{
				str.Format(" %s %s", GetSankrantiName(pvd->sankranti_zodiac), gstr[56].c_str());
				dayText += SPACE_BEFORE_LINE;
				dayText += str;
				dayText += "\n";
			}

/*			if (GetShowSetVal(7) == 1 && pvd->was_ksaya)//(m_dshow.m_info_ksaya) && (pvd->was_ksaya))
			{
				double h, m;
				VAISNAVADAY * p;


				if (pvd->ksaya_time1 < 0.0)
					m = modf(fabs(1.0 + pvd->ksaya_time1)*24, &h);
				else
					m = modf(pvd->ksaya_time1*24, &h);
				p = (pvd->ksaya_time1 < 0.0) ? prevd : pvd;
				str2.Format("%d %s, %02d:%02d", p->date.day, AvcGetMonthAbr(p->date.month), int(h), int(m*60));

				if (pvd->ksaya_time2 < 0.0)
					m = modf(fabs(1.0 + pvd->ksaya_time2)*24, &h);
				else
					m = modf(pvd->ksaya_time2*24, &h);
				p = (pvd->ksaya_time2 < 0.0) ? prevd : pvd;
				str3.Format("%d %s, %02d:%02d", p->date.day, AvcGetMonthAbr(p->date.month), int(h), int(m*60));

				str.Format("%s %s %s %s %s (%s)", gstr[89], gstr[850], str2, gstr[851], str3, AvcGetDSTSignature(pvd->nDST));
				AddListText(dayText, str);
			}*/

			/*if (GetShowSetVal(8) == 1)//(m_dshow.m_info_vriddhi) && (pvd->is_vriddhi))
			{
				if (pvd->is_vriddhi)
					AddListText(dayText, gstr[90]);
			}*/

			if (pvd->nCaturmasya & CMASYA_CONT_MASK)
			{
				int n = ((pvd->nCaturmasya & CMASYA_CONT_MASK) >> 22);
				dayText += SPACE_BEFORE_LINE;
				dayText += gstr[ 111 + n ].c_str();
				dayText += "\n";
			}

			if ((GetShowSetVal(13) == 1) && (pvd->nCaturmasya & CMASYA_PURN_MASK))
			{
				str.Format("%s [PURNIMA SYSTEM]"
					, gstr[107 + (pvd->nCaturmasya & CMASYA_PURN_MASK_DAY)
					           + ((pvd->nCaturmasya & CMASYA_PURN_MASK_MASA) >> 2)].c_str()
					);
				dayText += SPACE_BEFORE_LINE;
				dayText += str;
				dayText += "\n";
				if ((pvd->nCaturmasya & CMASYA_PURN_MASK_DAY) == 0x1)
				{
					dayText += gstr[110 + ((pvd->nCaturmasya & CMASYA_PURN_MASK_MASA) >> 2)].c_str();
					dayText += "\n";
				}
			}

			if ((GetShowSetVal(14) == 1) && (pvd->nCaturmasya & CMASYA_PRAT_MASK))
			{
				str.Format("%s [PRATIPAT SYSTEM]"
					, gstr[107 + ((pvd->nCaturmasya & CMASYA_PRAT_MASK_DAY) >> 8)
					           + ((pvd->nCaturmasya & CMASYA_PRAT_MASK_MASA) >> 10)].c_str()
					);
				dayText += SPACE_BEFORE_LINE;
				dayText += str;
				dayText += "\n";
				if ((pvd->nCaturmasya & CMASYA_PRAT_MASK_DAY) == 0x100)
				{
					dayText += SPACE_BEFORE_LINE;
					dayText += gstr[110 + ((pvd->nCaturmasya & CMASYA_PRAT_MASK_MASA) >> 10)].c_str();
					dayText += "\n";
				}
			}

			if ((GetShowSetVal(15) == 1) && (pvd->nCaturmasya & CMASYA_EKAD_MASK))
			{
				str.Format("%s [EKADASI SYSTEM]"
					, gstr[107 + ((pvd->nCaturmasya & CMASYA_EKAD_MASK_DAY) >> 16)
					           + ((pvd->nCaturmasya & CMASYA_EKAD_MASK_MASA) >> 18)].c_str()
					);
				dayText += SPACE_BEFORE_LINE;
				dayText += str;
				dayText += "\n";
				if ((pvd->nCaturmasya & CMASYA_EKAD_MASK_DAY) == 0x10000)
				{
					dayText += SPACE_BEFORE_LINE;
					dayText += gstr[110 + ((pvd->nCaturmasya & CMASYA_EKAD_MASK_MASA) >> 18)].c_str();
					dayText += "\n";
				}
			}

/*			// tithi at arunodaya
			if (GetShowSetVal(0) == 1)//m_dshow.m_tithi_arun)
			{
				str.Format("%s: %s", gstr[98], GetTithiName(pvd->astrodata.nTithiArunodaya));
				AddListText(dayText, str);
			}

			//"Arunodaya Time",//1
			if (GetShowSetVal(1) == 1)//m_dshow.m_arunodaya)
			{
				str.Format("%s %d:%02d (%s)", gstr[99], pvd->astrodata.sun.arunodaya.hour
					, pvd->astrodata.sun.arunodaya.min, AvcGetDSTSignature(pvd->nDST));
				AddListText(dayText, str);
			}
*/			//"Sunrise Time",//2
			//"Sunset Time",//3
			if (GetShowSetVal(2) == 1)//m_dshow.m_sunrise)
			{
				str.Format("%s %d:%02d (%s)", gstr[51].c_str(), pvd->astrodata.sun.rise.hour
					, pvd->astrodata.sun.rise.min, AvcGetDSTSignature(pvd->nDST));
				dayText += SPACE_BEFORE_LINE;
				dayText += str;
				dayText += "\n";
			}
			if (GetShowSetVal(3) == 1)//m_dshow.m_sunset)
			{
				str.Format("%s %d:%02d (%s)", gstr[52].c_str(), pvd->astrodata.sun.set.hour
					, pvd->astrodata.sun.set.min, AvcGetDSTSignature(pvd->nDST));
				dayText += SPACE_BEFORE_LINE;
				dayText += str;
				dayText += "\n";

			}
/*			//"Moonrise Time",//4
			if (GetShowSetVal(4) == 1)
			{
				if (pvd->moonrise.hour < 0)
					str = gstr[136];
				else
				{
					str.Format("%s %d:%02d (%s)", gstr[53], pvd->moonrise.hour
						, pvd->moonrise.min, AvcGetDSTSignature(pvd->nDST));
				}
				AddListText(dayText, str);
			}
			//"Moonset Time",//5
			if (GetShowSetVal(5) == 1)
			{
				if (pvd->moonrise.hour < 0)
					str = gstr[137];
				else
				{
					str.Format("%s %d:%02d (%s)", gstr[54], pvd->moonset.hour
						, pvd->moonset.min, AvcGetDSTSignature(pvd->nDST));
				}
				AddListText(dayText, str);
			}
			///"Sun Longitude",//9
			if (GetShowSetVal(9) == 1)//m_dshow.m_sun_long)
			{
				str.Format("%s: %f", gstr[100], pvd->astrodata.sun.longitude_deg);
				AddListText(dayText, str);
			}
			//"Moon Longitude",//10
			if (GetShowSetVal(10) == 1)//m_dshow.m_sun_long)
			{
				str.Format("%s: %f", gstr[101], pvd->astrodata.moon.longitude_deg);
				AddListText(dayText, str);
			}
			//"Ayanamsha value",//11
			if (GetShowSetVal(11) == 1)//m_dshow.m_sun_long)
			{
				str.Format("%s %f (%s)", gstr[102], pvd->astrodata.msAyanamsa, GetAyanamsaName(GetAyanamsaType()));
				AddListText(dayText, str);
			}
			//"Julian Day",//12
			if (GetShowSetVal(12) == 1)//m_dshow.m_sun_long)
			{
				str.Format("%s %f", gstr[103], pvd->astrodata.jdate);
				AddListText(dayText, str);
			}

*///			if (GetShowSetVal(21) == 1)
			{
				if (prevd != NULL)
				{
					if (prevd->astrodata.nMasa != pvd->astrodata.nMasa)
					{
						str.Format("%s %s %s", gstr[780].c_str(), GetMasaName(pvd->astrodata.nMasa), gstr[22].c_str());
						dayText += SPACE_BEFORE_LINE;
						dayText += str;
						dayText += "\n";
					}
				}
				if (nextd != NULL)
				{
					if (nextd->astrodata.nMasa != pvd->astrodata.nMasa)
					{
						str.Format("%s %s %s", gstr[781].c_str(), GetMasaName(pvd->astrodata.nMasa), gstr[22].c_str());
						dayText += SPACE_BEFORE_LINE;
						dayText += str;
						dayText += "\n";
					}
				}
			}

		_resolve_text:
			if (dayText.GetLength() > initialLength)
			{
				m_text += "BEGIN:VEVENT\n";
				str2.Format("DTSTART;VALUE=DATE:%04d%02d%02d\n", pvd->date.year, pvd->date.month, pvd->date.day);
				m_text += str2;
				/*str2.Format("DTEND;VALUE=DATE:%04d%02d%02dT%02d%02d%02d\n", pvd->date.year, pvd->date.month, pvd->date.day,
					pvd->astrodata.sun.set.hour, pvd->astrodata.sun.set.min, pvd->astrodata.sun.set.sec);
				m_text += str2;*/
				str2.Format("LOCATION:%s\n", loc.m_strName.c_str());
				str2.Replace(",", "\\,");
				m_text += str2;
				m_text += "SUMMARY:";
				dayText.TrimLeft();
				dayText.Replace(",", "\\,");
				m_text += dayText;
				str2.Format("UID:%08d-%04d-%04d-%04d-%08d%04d\n", st.wYear, st.wMonth*30 + st.wDay, st.wHour*60 + st.wMinute, st.wSecond, st.wMilliseconds, k);
				m_text += str2;
				m_text += "DURATION:P1D\nSEQUENCE:1\nEND:VEVENT\n";
			}
		}
	}

	m_text += "END:VCALENDAR\n";
	return 1;
}

int FormatCalendarCSV(TResultCalendar &daybuff, TString &m_text)
{
	int k, nFestClass;
	int initialLength = 0;
	int lastmasa = -1;
	int lastmonth = -1;
	int tzoffset = 0;
	TString str, dayText, str2, str3;
	VAISNAVADAY * pvd, * prevd, * nextd;
	char * SPACE_BEFORE_LINE = " , ";
	VCTIME vc;

	SYSTEMTIME st;
	GetLocalTime(&st);

	m_text = "\"Subject\",\"Begin Date\",\"Start\",\"End Date\",\"End\",\"WholeDay\",\"Alarm\"\n";

	for (k = 0; k < daybuff.m_PureCount; k++)
	{
//		date.shour = 0.0;
//		date.TimeZone = earth.tzone;

		prevd = daybuff.GetDay(k - 1);
		pvd = daybuff.GetDay(k);
		nextd = daybuff.GetDay(k + 1);

		if (pvd)
		{
			dayText.Empty();

			if (pvd->astrodata.nMasa != lastmasa)
			{
				lastmasa = pvd->astrodata.nMasa;
				initialLength = -1;
			}
			else
			{
				initialLength = 0;
			}

			if (dayText.IsEmpty() == FALSE)
				dayText += SPACE_BEFORE_LINE;
			dayText += GetTithiName(pvd->astrodata.nTithi);

			if ((pvd->astrodata.nTithi == 10) || (pvd->astrodata.nTithi == 25) || (pvd->astrodata.nTithi == 11) || (pvd->astrodata.nTithi == 26))
			{
				if (pvd->ekadasi_parana == false)
				{
					dayText += " ";
					if (pvd->nMhdType == EV_NULL)
					{
						dayText += gstr[58];
					}
					else
					{
						dayText += gstr[59];
					}
				}
			}
			dayText += "; ";
			initialLength = dayText.GetLength();

			if (pvd->astrodata.sun.longitude_deg < 0.0)
			{
				goto _resolve_text;
			}

//			if (GetShowSetVal(17) == 1)
			{
//				double h1, m1;
				if (pvd->ekadasi_parana)
				{
					pvd->GetTextEP(str);
					str.Delete(0, 17);
					dayText += str;
					dayText += "; ";

/*					m_text += "BEGIN:VEVENT\n";
					if (pvd->eparana_time1 >= 0.0) {
						m1 = modf(pvd->eparana_time1 * 24.0, &h1) * 60;
						str2.Format("DTSTART;TZID=%s:%04d%02d%02dT%02d%02d00\n", TTimeZone::GetTimeZoneName(nDst),
							pvd->date.year, pvd->date.month, pvd->date.day, int(h1), int(m1));
					} else {
						str2.Format("DTSTART;TZID=%s:%04d%02d%02dT%000000\n", TTimeZone::GetTimeZoneName(nDst),
							pvd->date.year, pvd->date.month, pvd->date.day);
					}
					m_text += str2;
					if (pvd->eparana_time2 >= 0.0) {
						m1 = modf(pvd->eparana_time2 * 24.0, &h1) * 60;
						str2.Format("DTEND;TZID=%s:%04d%02d%02dT%02d%02d00\n", TTimeZone::GetTimeZoneName(nDst),
							pvd->date.year, pvd->date.month, pvd->date.day, int(h1), int(m1));
					} else {
						str2.Format("DTEND;TZID=%s:%04d%02d%02dT%235959\n", TTimeZone::GetTimeZoneName(nDst),
							pvd->date.year, pvd->date.month, pvd->date.day);
					}
					m_text += str2;
					m_text += "SUMMARY:";
					m_text += gstr[60];
					m_text += "\nSEQUENCE:1\nEND:VEVENT\n";
*/
				}
			}

//			if (GetShowSetVal(6) == 1)
			{
				if (pvd->festivals)
				{
					int i = pvd->GetHeadFestival();
					while(pvd->GetNextFestival(i, str2))
					{
						if (str2.GetLength() > 1)
						{
							nFestClass = pvd->GetFestivalClass(str2);
							if (nFestClass < 0 || GetShowSetVal(22 + nFestClass) == 1)
							{
								dayText += str2;
								dayText += "; ";
							}
						}
					}
				}
			}

			if (/*GetShowSetVal(16) == 1 &&*/ pvd->sankranti_zodiac >= 0)
			{
				str.Format("%s %s; ", GetSankrantiName(pvd->sankranti_zodiac), gstr[56].c_str());
				dayText += str;
			}

/*			if (GetShowSetVal(7) == 1 && pvd->was_ksaya)//(m_dshow.m_info_ksaya) && (pvd->was_ksaya))
			{
				double h, m;
				VAISNAVADAY * p;


				if (pvd->ksaya_time1 < 0.0)
					m = modf(fabs(1.0 + pvd->ksaya_time1)*24, &h);
				else
					m = modf(pvd->ksaya_time1*24, &h);
				p = (pvd->ksaya_time1 < 0.0) ? prevd : pvd;
				str2.Format("%d %s, %02d:%02d", p->date.day, AvcGetMonthAbr(p->date.month), int(h), int(m*60));

				if (pvd->ksaya_time2 < 0.0)
					m = modf(fabs(1.0 + pvd->ksaya_time2)*24, &h);
				else
					m = modf(pvd->ksaya_time2*24, &h);
				p = (pvd->ksaya_time2 < 0.0) ? prevd : pvd;
				str3.Format("%d %s, %02d:%02d", p->date.day, AvcGetMonthAbr(p->date.month), int(h), int(m*60));

				str.Format("%s %s %s %s %s (%s)", gstr[89], gstr[850], str2, gstr[851], str3, AvcGetDSTSignature(pvd->nDST));
				AddListText(dayText, str);
			}*/

			/*if (GetShowSetVal(8) == 1)//(m_dshow.m_info_vriddhi) && (pvd->is_vriddhi))
			{
				if (pvd->is_vriddhi)
					AddListText(dayText, gstr[90]);
			}*/

			if (pvd->nCaturmasya & CMASYA_CONT_MASK)
			{
				int n = ((pvd->nCaturmasya & CMASYA_CONT_MASK) >> 22);
				dayText += gstr[ 111 + n ];
				dayText += "; ";
			}

			if ((GetShowSetVal(13) == 1) && (pvd->nCaturmasya & CMASYA_PURN_MASK))
			{
				str.Format("%s [PURNIMA SYSTEM]; "
					, gstr[107 + (pvd->nCaturmasya & CMASYA_PURN_MASK_DAY)
					           + ((pvd->nCaturmasya & CMASYA_PURN_MASK_MASA) >> 2)].c_str()
					);
				dayText += str;
				if ((pvd->nCaturmasya & CMASYA_PURN_MASK_DAY) == 0x1)
				{
					dayText += gstr[110 + ((pvd->nCaturmasya & CMASYA_PURN_MASK_MASA) >> 2)].c_str();
					dayText += "; ";
				}
			}

			if ((GetShowSetVal(14) == 1) && (pvd->nCaturmasya & CMASYA_PRAT_MASK))
			{
				str.Format("%s [PRATIPAT SYSTEM]; "
					, gstr[107 + ((pvd->nCaturmasya & CMASYA_PRAT_MASK_DAY) >> 8)
					           + ((pvd->nCaturmasya & CMASYA_PRAT_MASK_MASA) >> 10)].c_str()
					);
				dayText += str;
				if ((pvd->nCaturmasya & CMASYA_PRAT_MASK_DAY) == 0x100)
				{
					dayText += gstr[110 + ((pvd->nCaturmasya & CMASYA_PRAT_MASK_MASA) >> 10)].c_str();
					dayText += "; ";
				}
			}

			if ((GetShowSetVal(15) == 1) && (pvd->nCaturmasya & CMASYA_EKAD_MASK))
			{
				str.Format("%s [EKADASI SYSTEM]; "
					, gstr[107 + ((pvd->nCaturmasya & CMASYA_EKAD_MASK_DAY) >> 16)
					           + ((pvd->nCaturmasya & CMASYA_EKAD_MASK_MASA) >> 18)].c_str()
					);
				dayText += str;
				if ((pvd->nCaturmasya & CMASYA_EKAD_MASK_DAY) == 0x10000)
				{
					dayText += gstr[110 + ((pvd->nCaturmasya & CMASYA_EKAD_MASK_MASA) >> 18)].c_str();
					dayText += "; ";
				}
			}

/*			// tithi at arunodaya
			if (GetShowSetVal(0) == 1)//m_dshow.m_tithi_arun)
			{
				str.Format("%s: %s", gstr[98], GetTithiName(pvd->astrodata.nTithiArunodaya));
				AddListText(dayText, str);
			}

			//"Arunodaya Time",//1
			if (GetShowSetVal(1) == 1)//m_dshow.m_arunodaya)
			{
				str.Format("%s %d:%02d (%s)", gstr[99], pvd->astrodata.sun.arunodaya.hour
					, pvd->astrodata.sun.arunodaya.min, AvcGetDSTSignature(pvd->nDST));
				AddListText(dayText, str);
			}
*/			//"Sunrise Time",//2
			//"Sunset Time",//3
			if (GetShowSetVal(2) == 1)//m_dshow.m_sunrise)
			{
				str.Format("Sunrise %d:%02d; ", pvd->astrodata.sun.rise.hour
					, pvd->astrodata.sun.rise.min);
				dayText += str;
			}
			if (GetShowSetVal(3) == 1)//m_dshow.m_sunset)
			{
				str.Format("Sunset %d:%02d; ", pvd->astrodata.sun.set.hour, 
					pvd->astrodata.sun.set.min);
				dayText += str;
			}

/*			//"Moonrise Time",//4
			if (GetShowSetVal(4) == 1)
			{
				if (pvd->moonrise.hour < 0)
					str = gstr[136];
				else
				{
					str.Format("%s %d:%02d (%s)", gstr[53], pvd->moonrise.hour
						, pvd->moonrise.min, AvcGetDSTSignature(pvd->nDST));
				}
				AddListText(dayText, str);
			}
			//"Moonset Time",//5
			if (GetShowSetVal(5) == 1)
			{
				if (pvd->moonrise.hour < 0)
					str = gstr[137];
				else
				{
					str.Format("%s %d:%02d (%s)", gstr[54], pvd->moonset.hour
						, pvd->moonset.min, AvcGetDSTSignature(pvd->nDST));
				}
				AddListText(dayText, str);
			}
			///"Sun Longitude",//9
			if (GetShowSetVal(9) == 1)//m_dshow.m_sun_long)
			{
				str.Format("%s: %f", gstr[100], pvd->astrodata.sun.longitude_deg);
				AddListText(dayText, str);
			}
			//"Moon Longitude",//10
			if (GetShowSetVal(10) == 1)//m_dshow.m_sun_long)
			{
				str.Format("%s: %f", gstr[101], pvd->astrodata.moon.longitude_deg);
				AddListText(dayText, str);
			}
			//"Ayanamsha value",//11
			if (GetShowSetVal(11) == 1)//m_dshow.m_sun_long)
			{
				str.Format("%s %f (%s)", gstr[102], pvd->astrodata.msAyanamsa, GetAyanamsaName(GetAyanamsaType()));
				AddListText(dayText, str);
			}
			//"Julian Day",//12
			if (GetShowSetVal(12) == 1)//m_dshow.m_sun_long)
			{
				str.Format("%s %f", gstr[103], pvd->astrodata.jdate);
				AddListText(dayText, str);
			}

*///			if (GetShowSetVal(21) == 1)
			{
				if (prevd != NULL)
				{
					if (prevd->astrodata.nMasa != pvd->astrodata.nMasa)
					{
						str.Format("%s %s %s", gstr[780].c_str(), GetMasaName(pvd->astrodata.nMasa), gstr[22].c_str());
						dayText += str;
						dayText += "; ";
					}
				}
				if (nextd != NULL)
				{
					if (nextd->astrodata.nMasa != pvd->astrodata.nMasa)
					{
						str.Format("%s %s %s", gstr[781].c_str(), GetMasaName(pvd->astrodata.nMasa), gstr[22].c_str());
						dayText += str;
						dayText += "; ";
					}
				}
			}

		_resolve_text:
			if (dayText.GetLength() > initialLength || (GetShowSetVal(20) == 0))
			{
				m_text += "\"";
				m_text += dayText;
				m_text += "\",";

				str2.Format("\"%d.%d.%d\",\"0:00:00\",\"%d.%d.%d\",\"0:00:00\",\"True\",\"False\"\n", 
					pvd->date.day, pvd->date.month, pvd->date.year, nextd->date.day,
					nextd->date.month, nextd->date.year);
				m_text += str2;
			}
		}
	}

	return 1;
}

int FormatCalendarVCAL(TResultCalendar &daybuff, TString &m_text)
{
	int k, nFestClass;
	int initialLength = 0;
	int lastmasa = -1;
	int lastmonth = -1;
	int tzoffset = 0;
	TString str, dayText, str2, str3;
	VAISNAVADAY * pvd, * prevd, * nextd;
	char * SPACE_BEFORE_LINE = " , ";
	VCTIME vc;

	SYSTEMTIME st;
	GetLocalTime(&st);

	m_text = "BEGIN:VCALENDAR\nVERSION:1.0\nX-WR-CALNAME:VAISNAVA\nPRODID:-//GBC Calendar Comitee//GCAL//EN\n";
	m_text += "X-WR-RELCALID:";
	str2.Format("%08d-%04d-%04d-%04d-%04d%08d", st.wYear + st.wMilliseconds, st.wDay * st.wDayOfWeek, st.wMonth,
		st.wHour, st.wMinute + st.wMilliseconds);
	m_text += str2;
	m_text += "\nX-WR-TIMEZONE:";

	m_text += TTimeZone::GetTimeZoneName(daybuff.m_Location.m_nDST);
	m_text += "\n";

	m_text += "CALSCALE:GREGORIAN\nMETHOD:PUBLISH\n";
	/*m_text += "BEGIN:VTIMEZONE\nTZID:";
	m_text += TTimeZone::GetTimeZoneName(nDst);
	str2.Format("\nLAST-MODIFIED:%04d%02d%02dT%02d%02d%02dZ", st.wYear, st.wMonth, st.wDay, st.wHour, st.wMinute, st.wSecond);
	m_text += str2;

	tzoffset = int(TTimeZone::GetTimeZoneOffset(nDst) * 60.0);
	tzoff = tzoffset + TTimeZone::GetTimeZoneBias(nDst);

	if (TTimeZone::GetTimeZoneBias(nDst) > 0)
	{
		TTimeZone::GetDaylightTimeStartDate(nDst, st.wYear, vc);
		str2.Format("\nBEGIN:DAYLIGHT\nDTSTART:%04d%02d%02dT%02d0000", vc.year, vc.month, vc.day, vc.GetHour());
		m_text += str2;

		str2.Format("\nTZOFFSETTO:%c%02d%02d", (tzoff > 0 ? '+' : '-'), abs(tzoff) / 60, abs(tzoff) % 60);
		m_text += str2;

		str2.Format("\nTZOFFSETFROM:%c%02d%02d", '+', 0, 0);
		m_text += str2;

		TTimeZone::GetNormalTimeStartDate(nDst, st.wYear, vc);
		m_text += "\nEND:DAYLIGHT\nBEGIN:STANDARD\nDTSTART:";
		str2.Format("%04d%02d%02dT%02d0000", vc.year, vc.month, vc.day, vc.GetHour());
		m_text += str2;

		str2.Format("\nTZOFFSETTO:%c%02d%02d", (tzoffset > 0 ? '+' : '-'), abs(tzoffset)/60, abs(tzoffset) % 60);
		m_text += str2;
		str2.Format("\nTZOFFSETFROM:%c%02d%02d", (tzoff > 0 ? '+' : '-'), abs(tzoff) / 60, abs(tzoff) % 60);
		m_text += str2;
		m_text += "\nEND:STANDARD\n";
	}
	else
	{
		m_text += "\nBEGIN:STANDARD\nDTSTART:";
		str2.Format("%04d0101T000000", vc.year, vc.month, vc.day, vc.GetHour());
		m_text += str2;

		str.Format("\nTZOFFSETTO:%+02d%02d", tzoffset/60, abs(tzoffset) % 60);
		m_text += str2;
		str2.Format("\nTZOFFSETFROM:+0000");
		m_text += str2;
		m_text += "\nEND:STANDARD\n";
	}

	m_text += "END:VTIMEZONE\n";
*/
	for (k = 0; k < daybuff.m_PureCount; k++)
	{
//		date.shour = 0.0;
//		date.TimeZone = earth.tzone;

		prevd = daybuff.GetDay(k - 1);
		pvd = daybuff.GetDay(k);
		nextd = daybuff.GetDay(k + 1);

		if (pvd)
		{
			dayText.Empty();

			if (pvd->astrodata.nMasa != lastmasa)
			{
				str.Format("%s %s, Gaurabda %d", GetMasaName(pvd->astrodata.nMasa), gstr[22].c_str(), pvd->astrodata.nGaurabdaYear);
				dayText += str;
				dayText += "\n";
				if ((pvd->astrodata.nMasa == ADHIKA_MASA) && ((lastmasa >= SRIDHARA_MASA) && (lastmasa <= DAMODARA_MASA)))
				{
					if (dayText.IsEmpty() == FALSE)
						dayText += SPACE_BEFORE_LINE;
					dayText += gstr[128];
					dayText += "\n";
				}

				lastmasa = pvd->astrodata.nMasa;
				initialLength = -1;
			}
			else
			{
				initialLength = 0;
			}

			if (dayText.IsEmpty() == FALSE)
				dayText += SPACE_BEFORE_LINE;
			dayText += GetTithiName(pvd->astrodata.nTithi);

			if ((pvd->astrodata.nTithi == 10) || (pvd->astrodata.nTithi == 25) || (pvd->astrodata.nTithi == 11) || (pvd->astrodata.nTithi == 26))
			{
				if (pvd->ekadasi_parana == false)
				{
					dayText += " ";
					if (pvd->nMhdType == EV_NULL)
					{
						dayText += gstr[58];
					}
					else
					{
						dayText += gstr[59];
					}
				}
			}
			dayText += "\n";
			initialLength += dayText.GetLength();

			if (pvd->astrodata.sun.longitude_deg < 0.0)
			{
				goto _resolve_text;
			}

//			if (GetShowSetVal(17) == 1)
			{
				double h1, m1;
				if (pvd->ekadasi_parana)
				{
/*					pvd->GetTextEP(str);
					str.Delete(0, 17);
					dayText += SPACE_BEFORE_LINE;
					dayText += str;
					dayText += "\n";
*/
					m_text += "BEGIN:VEVENT\n";
					if (pvd->eparana_time1 >= 0.0) {
						m1 = modf(pvd->eparana_time1, &h1) * 60;
						str2.Format("DTSTART:%04d%02d%02dT%02d%02d00\n", pvd->date.year, pvd->date.month, pvd->date.day, int(h1), int(m1));
					} else {
						str2.Format("DTSTART:%04d%02d%02dT000000\n", pvd->date.year, pvd->date.month, pvd->date.day);
					}
					m_text += str2;
					if (pvd->eparana_time2 >= 0.0) {
						m1 = modf(pvd->eparana_time2, &h1) * 60;
						str2.Format("DTEND:%04d%02d%02dT%02d%02d00\n", pvd->date.year, pvd->date.month, pvd->date.day, int(h1), int(m1));
					} else {
						str2.Format("DTEND:%04d%02d%02dT%02d%02d%00\n", pvd->date.year, pvd->date.month, pvd->date.day, pvd->astrodata.sun.set.hour, pvd->astrodata.sun.set.min);
					}
					m_text += str2;
					m_text += "SUMMARY:";
					m_text += gstr[60];
					m_text += "\nSEQUENCE:1\nEND:VEVENT\n";

				}
			}

//			if (GetShowSetVal(6) == 1)
			{
				if (pvd->festivals)
				{
					int i = pvd->GetHeadFestival();
					while(pvd->GetNextFestival(i, str2))
					{
						if (str2.GetLength() > 1)
						{
							nFestClass = pvd->GetFestivalClass(str2);
							if (nFestClass < 0 || GetShowSetVal(22 + nFestClass) == 1)
							{
								dayText += SPACE_BEFORE_LINE;
								dayText += str2;
								dayText += "\n";
							}
						}
					}
				}
			}

			if (/*GetShowSetVal(16) == 1 &&*/ pvd->sankranti_zodiac >= 0)
			{
				str.Format(" %s %s", GetSankrantiName(pvd->sankranti_zodiac), gstr[56].c_str());
				dayText += SPACE_BEFORE_LINE;
				dayText += str;
				dayText += "\n";
			}

/*			if (GetShowSetVal(7) == 1 && pvd->was_ksaya)//(m_dshow.m_info_ksaya) && (pvd->was_ksaya))
			{
				double h, m;
				VAISNAVADAY * p;


				if (pvd->ksaya_time1 < 0.0)
					m = modf(fabs(1.0 + pvd->ksaya_time1)*24, &h);
				else
					m = modf(pvd->ksaya_time1*24, &h);
				p = (pvd->ksaya_time1 < 0.0) ? prevd : pvd;
				str2.Format("%d %s, %02d:%02d", p->date.day, AvcGetMonthAbr(p->date.month), int(h), int(m*60));

				if (pvd->ksaya_time2 < 0.0)
					m = modf(fabs(1.0 + pvd->ksaya_time2)*24, &h);
				else
					m = modf(pvd->ksaya_time2*24, &h);
				p = (pvd->ksaya_time2 < 0.0) ? prevd : pvd;
				str3.Format("%d %s, %02d:%02d", p->date.day, AvcGetMonthAbr(p->date.month), int(h), int(m*60));

				str.Format("%s %s %s %s %s (%s)", gstr[89], gstr[850], str2, gstr[851], str3, AvcGetDSTSignature(pvd->nDST));
				AddListText(dayText, str);
			}*/

			/*if (GetShowSetVal(8) == 1)//(m_dshow.m_info_vriddhi) && (pvd->is_vriddhi))
			{
				if (pvd->is_vriddhi)
					AddListText(dayText, gstr[90]);
			}*/

			if (pvd->nCaturmasya & CMASYA_CONT_MASK)
			{
				int n = ((pvd->nCaturmasya & CMASYA_CONT_MASK) >> 22);
				dayText += SPACE_BEFORE_LINE;
				dayText += gstr[ 111 + n ];
				dayText += "\n";
			}

			if ((GetShowSetVal(13) == 1) && (pvd->nCaturmasya & CMASYA_PURN_MASK))
			{
				str.Format("%s [PURNIMA SYSTEM]"
					, gstr[107 + (pvd->nCaturmasya & CMASYA_PURN_MASK_DAY)
					           + ((pvd->nCaturmasya & CMASYA_PURN_MASK_MASA) >> 2)].c_str()
					);
				dayText += SPACE_BEFORE_LINE;
				dayText += str;
				dayText += "\n";
				if ((pvd->nCaturmasya & CMASYA_PURN_MASK_DAY) == 0x1)
				{
					dayText += gstr[110 + ((pvd->nCaturmasya & CMASYA_PURN_MASK_MASA) >> 2)].c_str();
					dayText += "\n";
				}
			}

			if ((GetShowSetVal(14) == 1) && (pvd->nCaturmasya & CMASYA_PRAT_MASK))
			{
				str.Format("%s [PRATIPAT SYSTEM]"
					, gstr[107 + ((pvd->nCaturmasya & CMASYA_PRAT_MASK_DAY) >> 8)
					           + ((pvd->nCaturmasya & CMASYA_PRAT_MASK_MASA) >> 10)].c_str()
					);
				dayText += SPACE_BEFORE_LINE;
				dayText += str;
				dayText += "\n";
				if ((pvd->nCaturmasya & CMASYA_PRAT_MASK_DAY) == 0x100)
				{
					dayText += SPACE_BEFORE_LINE;
					dayText += gstr[110 + ((pvd->nCaturmasya & CMASYA_PRAT_MASK_MASA) >> 10)].c_str();
					dayText += "\n";
				}
			}

			if ((GetShowSetVal(15) == 1) && (pvd->nCaturmasya & CMASYA_EKAD_MASK))
			{
				str.Format("%s [EKADASI SYSTEM]"
					, gstr[107 + ((pvd->nCaturmasya & CMASYA_EKAD_MASK_DAY) >> 16)
					           + ((pvd->nCaturmasya & CMASYA_EKAD_MASK_MASA) >> 18)].c_str()
					);
				dayText += SPACE_BEFORE_LINE;
				dayText += str;
				dayText += "\n";
				if ((pvd->nCaturmasya & CMASYA_EKAD_MASK_DAY) == 0x10000)
				{
					dayText += SPACE_BEFORE_LINE;
					dayText += gstr[110 + ((pvd->nCaturmasya & CMASYA_EKAD_MASK_MASA) >> 18)].c_str();
					dayText += "\n";
				}
			}

/*			// tithi at arunodaya
			if (GetShowSetVal(0) == 1)//m_dshow.m_tithi_arun)
			{
				str.Format("%s: %s", gstr[98], GetTithiName(pvd->astrodata.nTithiArunodaya));
				AddListText(dayText, str);
			}

			//"Arunodaya Time",//1
			if (GetShowSetVal(1) == 1)//m_dshow.m_arunodaya)
			{
				str.Format("%s %d:%02d (%s)", gstr[99], pvd->astrodata.sun.arunodaya.hour
					, pvd->astrodata.sun.arunodaya.min, AvcGetDSTSignature(pvd->nDST));
				AddListText(dayText, str);
			}
*/			//"Sunrise Time",//2
			//"Sunset Time",//3
			if (GetShowSetVal(2) == 1)//m_dshow.m_sunrise)
			{
				str.Format("%s %d:%02d (%s)", gstr[51].c_str(), pvd->astrodata.sun.rise.hour
					, pvd->astrodata.sun.rise.min, AvcGetDSTSignature(pvd->nDST));
				dayText += SPACE_BEFORE_LINE;
				dayText += str;
				dayText += "\n";
			}
			if (GetShowSetVal(3) == 1)//m_dshow.m_sunset)
			{
				str.Format("%s %d:%02d (%s)", gstr[52].c_str(), pvd->astrodata.sun.set.hour
					, pvd->astrodata.sun.set.min, AvcGetDSTSignature(pvd->nDST));
				dayText += SPACE_BEFORE_LINE;
				dayText += str;
				dayText += "\n";

			}
/*			//"Moonrise Time",//4
			if (GetShowSetVal(4) == 1)
			{
				if (pvd->moonrise.hour < 0)
					str = gstr[136];
				else
				{
					str.Format("%s %d:%02d (%s)", gstr[53], pvd->moonrise.hour
						, pvd->moonrise.min, AvcGetDSTSignature(pvd->nDST));
				}
				AddListText(dayText, str);
			}
			//"Moonset Time",//5
			if (GetShowSetVal(5) == 1)
			{
				if (pvd->moonrise.hour < 0)
					str = gstr[137];
				else
				{
					str.Format("%s %d:%02d (%s)", gstr[54], pvd->moonset.hour
						, pvd->moonset.min, AvcGetDSTSignature(pvd->nDST));
				}
				AddListText(dayText, str);
			}
			///"Sun Longitude",//9
			if (GetShowSetVal(9) == 1)//m_dshow.m_sun_long)
			{
				str.Format("%s: %f", gstr[100], pvd->astrodata.sun.longitude_deg);
				AddListText(dayText, str);
			}
			//"Moon Longitude",//10
			if (GetShowSetVal(10) == 1)//m_dshow.m_sun_long)
			{
				str.Format("%s: %f", gstr[101], pvd->astrodata.moon.longitude_deg);
				AddListText(dayText, str);
			}
			//"Ayanamsha value",//11
			if (GetShowSetVal(11) == 1)//m_dshow.m_sun_long)
			{
				str.Format("%s %f (%s)", gstr[102], pvd->astrodata.msAyanamsa, GetAyanamsaName(GetAyanamsaType()));
				AddListText(dayText, str);
			}
			//"Julian Day",//12
			if (GetShowSetVal(12) == 1)//m_dshow.m_sun_long)
			{
				str.Format("%s %f", gstr[103], pvd->astrodata.jdate);
				AddListText(dayText, str);
			}

*///			if (GetShowSetVal(21) == 1)
			{
				if (prevd != NULL)
				{
					if (prevd->astrodata.nMasa != pvd->astrodata.nMasa)
					{
						str.Format("%s %s %s", gstr[780].c_str(), GetMasaName(pvd->astrodata.nMasa), gstr[22].c_str());
						dayText += SPACE_BEFORE_LINE;
						dayText += str;
						dayText += "\n";
					}
				}
				if (nextd != NULL)
				{
					if (nextd->astrodata.nMasa != pvd->astrodata.nMasa)
					{
						str.Format("%s %s %s", gstr[781].c_str(), GetMasaName(pvd->astrodata.nMasa), gstr[22].c_str());
						dayText += SPACE_BEFORE_LINE;
						dayText += str;
						dayText += "\n";
					}
				}
			}

		_resolve_text:
			if (dayText.GetLength() > initialLength)
			{
				m_text += "BEGIN:VEVENT\n";
				str2.Format("DTSTART:%04d%02d%02dT%02d%02d%02d\n", pvd->date.year, pvd->date.month, pvd->date.day,
					pvd->astrodata.sun.rise.hour, pvd->astrodata.sun.rise.min, pvd->astrodata.sun.rise.sec);
				m_text += str2;
				str2.Format("DTEND:%04d%02d%02dT%02d%02d%02d\n", pvd->date.year, pvd->date.month, pvd->date.day,
					pvd->astrodata.sun.set.hour, pvd->astrodata.sun.set.min, pvd->astrodata.sun.set.sec);
				m_text += str2;
				str2.Format("LOCATION:%s\n", daybuff.m_Location.m_strName.c_str());
				str2.Replace(",", "\\,");
				m_text += str2;
				m_text += "SUMMARY:";
				dayText.TrimLeft();
				dayText.Replace(",", "\\,");
				m_text += dayText;
				str2.Format("UID:%08d-%04d-%04d-%04d-%08d%04d\n", st.wYear, st.wMonth*30 + st.wDay, st.wHour*60 + st.wMinute, st.wSecond, st.wMilliseconds, k);
				m_text += str2;
				m_text += "SEQUENCE:1\nEND:VEVENT\n";
			}
		}
	}

	m_text += "END:VCALENDAR\n";
	return 1;
}

void AvcGetTodayInfo(VCTIME vc, CLocationRef & loc, TString &str)
{
	TString str2, str3, str4;

	int k = 0, nFestClass;

	TResultCalendar db;

	VCTIME vc2 = vc;
	vc2.tzone = loc.m_fTimezone;
	vc2.PreviousDay();
	vc2.PreviousDay();
	vc2.PreviousDay();
	vc2.PreviousDay();
	db.CalculateCalendar(loc, vc2, 9);

	int i = db.FindDate(vc);
	VAISNAVADAY * p = db.GetDay(i);

	if (p == NULL)
		return;

	vc.InitWeekDay();

	str2.Format("%s (%s, %s, Timezone: %s)\r\n\r\n[%d %s %d - %s]\r\n  %s, %s %s\r\n  %s %s, %d Gaurabda\r\n\r\n",
		loc.m_strName.c_str(), AvcGetTextLatitude(loc.m_fLatitude), AvcGetTextLongitude(loc.m_fLongitude),
		TTimeZone::GetTimeZoneName(loc.m_nDST),
		vc.day, AvcGetMonthAbr(vc.month), vc.year, gstr[vc.dayOfWeek].c_str(),
		GetTithiName(p->astrodata.nTithi), GetPaksaName(p->astrodata.nPaksa), gstr[20].c_str(), 
		GetMasaName(p->astrodata.nMasa), gstr[22].c_str(), p->astrodata.nGaurabdaYear);

	str = str2;

	if (p->ekadasi_parana)
	{
		p->GetTextEP(str2);
		str2.Delete(0, 14);
		str += str2;
		str += "\r\n";
	}

	// adding mahadvadasi
	// adding spec festivals

	if (p->festivals)
	{
		int i = p->GetHeadFestival();
		while(p->GetNextFestival(i, str2))
		{
			if (str2.GetLength() > 1)
			{
				nFestClass = p->GetFestivalClass(str2);
				if (nFestClass < 0 || GetShowSetVal(22 + nFestClass) == 1)
				{
					str += "   ";
					str += str2;
					str += "\r\n";
				}
			}
		}
	}

	str += "\r\n";

	if (GetShowSetVal(16) == 1 && p->sankranti_zodiac >= 0)
	{
		//double h1, m1;
		//m1 = modf(p->sankranti_day.shour*24, &h1);
		str2.Format(" %s %s (%s %s %s %d %s, %02d:%02d %s) "
			, GetSankrantiName(p->sankranti_zodiac)
			, gstr[56].c_str()
			, gstr[111].c_str(), GetSankrantiNameEn(p->sankranti_zodiac)
			, gstr[852].c_str()
			, p->sankranti_day.day, AvcGetMonthAbr(p->sankranti_day.month)
			, p->sankranti_day.GetHour(), p->sankranti_day.GetMinuteRound()
			, AvcGetDSTSignature(p->nDST));
		int length = str2.GetLength();
		int seplen = _tcslen(gpszSeparator);
		length = (seplen - length) / 2;
		str += (gpszSeparator + (seplen - length));
		str += str2;
		str += (gpszSeparator + (seplen - length));
		str += "\r\n";
	}

	if (GetShowSetVal(7) == 1 && p->was_ksaya)//(m_dshow.m_info_ksaya) && (pvd->was_ksaya))
	{
		double h, m;
		VCTIME dd;
		m = modf(p->ksaya_time1*24, &h);
		dd = p->date;
		if (p->ksaya_day1 < 0.0)
			dd.PreviousDay();
		str2.Format("%d %s, %02d:%02d", dd.day, AvcGetMonthAbr(dd.month), int(h), int(m*60));

//				if (pvd->ksaya_time2 < 0.0)
//					m = modf(fabs(1.0 + pvd->ksaya_time2)*24, &h);
//				else
		m = modf(p->ksaya_time2*24, &h);
		dd = p->date;
		if (p->ksaya_day2 < 0.0)
			dd.PreviousDay();
		str3.Format("%d %s, %02d:%02d", dd.day, AvcGetMonthAbr(dd.month), int(h), int(m*60));

		str4.Format("%s %s %s %s %s (%s)\r\n", gstr[89].c_str(), gstr[850].c_str(), str2.c_str(), gstr[851].c_str(), str3.c_str(), AvcGetDSTSignature(p->nDST));
		str += str4;
	}
	// adding fasting
			if (GetShowSetVal(8) == 1)//(m_dshow.m_info_vriddhi) && (pvd->is_vriddhi))
			{
				if (p->is_vriddhi)
				{
					str += gstr[90];
					str += "\r\n";
				}
			}


	if (p->nCaturmasya & CMASYA_PURN_MASK)
	{
		str2.Format("%s [PURNIMA SYSTEM]\r\n"
			, gstr[107 + (p->nCaturmasya & CMASYA_PURN_MASK_DAY)
					   + ((p->nCaturmasya & CMASYA_PURN_MASK_MASA) >> 2)].c_str()
			);
		str += str2;
		if ((p->nCaturmasya & CMASYA_PURN_MASK_DAY) == 0x1)
		{
			str += gstr[110 + ((p->nCaturmasya & CMASYA_PURN_MASK_MASA) >> 2)].c_str();
		}
	}

	if (p->nCaturmasya & CMASYA_PRAT_MASK)
	{
		str2.Format("%s [PRATIPAT SYSTEM]\r\n"
			, gstr[107 + ((p->nCaturmasya & CMASYA_PRAT_MASK_DAY) >> 8)
					   + ((p->nCaturmasya & CMASYA_PRAT_MASK_MASA) >> 10)].c_str()
			);
		str += str2;
		if ((p->nCaturmasya & CMASYA_PRAT_MASK_DAY) == 0x100)
		{
			str += gstr[110 + ((p->nCaturmasya & CMASYA_PRAT_MASK_MASA) >> 10)].c_str();
			str += "\r\n";
		}
	}

	if (p->nCaturmasya & CMASYA_EKAD_MASK)
	{
		str2.Format("%s [EKADASI SYSTEM]\r\n"
			, gstr[107 + ((p->nCaturmasya & CMASYA_EKAD_MASK_DAY) >> 16)
					   + ((p->nCaturmasya & CMASYA_EKAD_MASK_MASA) >> 18)].c_str()
			);
		str += str2;
		if ((p->nCaturmasya & CMASYA_EKAD_MASK_DAY) == 0x10000)
		{
			str += gstr[110 + ((p->nCaturmasya & CMASYA_EKAD_MASK_MASA) >> 18)].c_str();
			str += "\r\n";
		}
	}
			// tithi at arunodaya
			if (GetShowSetVal(0) == 1)//m_dshow.m_tithi_arun)
			{
				str2.Format("%s: %s\r\n", gstr[98].c_str(), GetTithiName(p->astrodata.nTithiArunodaya));
				str += str2;
			}

			//"Arunodaya Time",//1
			if (GetShowSetVal(1) == 1)//m_dshow.m_arunodaya)
			{
				str2.Format("%s %d:%02d (%s)\r\n", gstr[99].c_str(), p->astrodata.sun.arunodaya.hour
					, p->astrodata.sun.arunodaya.min, AvcGetDSTSignature(p->nDST));
				str += str2;
			}

			//"Moonrise Time",//4
			if (GetShowSetVal(4) == 1)
			{
				if (p->moonrise.hour < 0)
					str2 = gstr[136];
				else
				{
					str2.Format("%s %d:%02d (%s)", gstr[53].c_str(), p->moonrise.hour
						, p->moonrise.min, AvcGetDSTSignature(p->nDST));
				}
				str += str2;
				str += "\r\n";
			}
			//"Moonset Time",//5
			if (GetShowSetVal(5) == 1)
			{
				if (p->moonrise.hour < 0)
					str2 = gstr[137];
				else
				{
					str2.Format("%s %d:%02d (%s)", gstr[54].c_str(), p->moonset.hour
						, p->moonset.min, AvcGetDSTSignature(p->nDST));
				}
				str += str2;
				str += "\r\n";
			}
			///"Sun Longitude",//9
			if (GetShowSetVal(9) == 1)//m_dshow.m_sun_long)
			{
				str2.Format("%s: %f (*)\r\n", gstr[100].c_str(), p->astrodata.sun.longitude_deg);
				str += str2;
			}
			//"Moon Longitude",//10
			if (GetShowSetVal(10) == 1)//m_dshow.m_sun_long)
			{
				str2.Format("%s: %f (*)\r\n", gstr[101].c_str(), p->astrodata.moon.longitude_deg);
				str += str2;
			}
			//"Ayanamsha value",//11
			if (GetShowSetVal(11) == 1)//m_dshow.m_sun_long)
			{
				str2.Format("%s %f (%s) (*)\r\n", gstr[102].c_str(), p->astrodata.msAyanamsa, GetAyanamsaName(GetAyanamsaType()));
				str += str2;
			}
			//"Julian Day",//12
			if (GetShowSetVal(12) == 1)//m_dshow.m_sun_long)
			{
				str2.Format("%s %f (*)\r\n", gstr[103].c_str(), p->astrodata.jdate);
				str += str2;
			}

	/*BEGIN GCAL 1.4.3*/
	DAYTIME tdA, tdB;

	if (GetShowSetVal(45))
	{
		tdA = p->astrodata.sun.rise;
		tdB = p->astrodata.sun.rise;
		tdA -= 96;
		tdB -= 48;
		str2.Format("\r\nBrahma Muhurta %2d:%02d - %2d:%02d (%s)", 
			tdA.hour, tdA.min, tdB.hour, tdB.min, AvcGetDSTSignature(p->nDST));
		str += str2;
	}

	if (GetShowSetVal(29))
	{
		str2.Format("\r\n%s %2d:%02d ",
			gstr[51].c_str(), p->astrodata.sun.rise.hour, p->astrodata.sun.rise.min );
		str += str2;
		if (GetShowSetVal(32))
		{
			tdA = p->astrodata.sun.rise;
			tdB = p->astrodata.sun.rise;
			tdA -= 24;
			tdB += 24;
			str2.Format(" sandhya %2d:%02d - %2d:%02d ", tdA.hour, tdA.min, tdB.hour, tdB.min);
			str += str2;
		}
		str2.Format(" (%s)\r\n", AvcGetDSTSignature(p->nDST));
		str += str2;
	}
	if (GetShowSetVal(30))
	{
		str2.Format("%s    %2d:%02d ", gstr[857].c_str(), p->astrodata.sun.noon.hour, p->astrodata.sun.noon.min);
		str += str2;
		if (GetShowSetVal(32))
		{
			tdA = p->astrodata.sun.noon;
			tdB = p->astrodata.sun.noon;
			tdA -= 24;
			tdB += 24;
			str2.Format(" sandhya %2d:%02d - %2d:%02d ", tdA.hour, tdA.min, tdB.hour, tdB.min);
			str += str2;
		}
		str2.Format(" (%s)\r\n", AvcGetDSTSignature(p->nDST));
		str += str2;
	}
	if (GetShowSetVal(31))
	{
		str2.Format("%s  %2d:%02d ", gstr[52].c_str(), p->astrodata.sun.set.hour, p->astrodata.sun.set.min);
		str += str2;
		if (GetShowSetVal(32))
		{
			tdA = p->astrodata.sun.set;
			tdB = p->astrodata.sun.set;
			tdA -= 24;
			tdB += 24;
			str2.Format(" sandhya %2d:%02d - %2d:%02d ", tdA.hour, tdA.min, tdB.hour, tdB.min);
			str += str2;
		}
		str2.Format(" (%s)\r\n", AvcGetDSTSignature(p->nDST));
		str += str2;
	}

	if (GetShowSetVal(33))
	{
		str2.Format("\r\n%s info\r\n   Moon in %s %s",
			gstr[51].c_str(), 
			GetNaksatraName(p->astrodata.nNaksatra), gstr[15].c_str());
		str += str2;
		if (GetShowSetVal(47))
		{
			str2.Format(", %.1f%% passed (%s Pada)", p->astrodata.nNaksatraElapse, gstr[811+int(p->astrodata.nNaksatraElapse/25)].c_str());
			str += str2;
		}
		if (GetShowSetVal(46))
		{
			str2.Format(", Moon in %s %s", GetSankrantiName(p->astrodata.nMoonRasi), gstr[105].c_str());
			str += str2;
		}
		str2.Format(", %s %s\r\n   Sun in %s %s.\r\n",
			GetYogaName(p->astrodata.nYoga), gstr[104].c_str(),
			GetSankrantiName(p->astrodata.nSunRasi), gstr[105].c_str());
		str += str2;
	}

	AddNoteText(str);

	/* END GCAL 1.4.3 */

}

void FormatTodayInfoRtf(VCTIME vc, CLocationRef & loc, TString &str)
{
	TString str2, str3, str4;
	TString str5;

	int k = 0, nFestClass;

	TResultCalendar db;

	VCTIME vc2 = vc;
	vc2.tzone = loc.m_fTimezone;
	vc2.PreviousDay();
	vc2.PreviousDay();
	vc2.PreviousDay();
	vc2.PreviousDay();
	db.CalculateCalendar(loc, vc2, 9);

	int i = db.FindDate(vc);
	VAISNAVADAY * p = db.GetDay(i);

	if (p == NULL)
		return;

	str = "";
	AppendRtfHeader(str);
	AvcGetDateText(str3, vc);
	str2.Format("\\f2\\fs%d %s ", g_HeaderSize, str3.c_str());
	str += str2;

	str2.Format("\\par\\f2\\fs%d {\\fs%d %s}\\line %s (%s, %s, Timezone: %s)\\par\r\n\\par\r\n  %s, %s %s\\par\r\n  %s %s, %d Gaurabda\\par\r\n\\par\r\n",
		g_TextSize, g_TextSize+4, gstr[p->date.dayOfWeek].c_str(),
		loc.m_strName.c_str(), AvcGetTextLatitude(loc.m_fLatitude), AvcGetTextLongitude(loc.m_fLongitude),
		TTimeZone::GetTimeZoneName(loc.m_nDST),
		GetTithiName(p->astrodata.nTithi), GetPaksaName(p->astrodata.nPaksa), gstr[20].c_str(), 
		GetMasaName(p->astrodata.nMasa), gstr[22].c_str(), p->astrodata.nGaurabdaYear);

	str += str2;

	if (p->ekadasi_parana)
	{
		p->GetTextEP(str2);
		str2.Delete(0, 14);
		str += str2;
		str += "\\par\r\n";
	}

	// adding mahadvadasi
	// adding spec festivals

	if (p->festivals)
	{
		int i = p->GetHeadFestival();
		while(p->GetNextFestival(i, str2))
		{
			if (str2.GetLength() > 1)
			{
				nFestClass = p->GetFestivalClass(str2);
				if (nFestClass < 0 || GetShowSetVal(22 + nFestClass) == 1)
				{
					str += "\\tab ";
					str += str2;
					str += "\\par\r\n";
				}
			}
		}
	}

	str += "\\par\r\n";

	if (GetShowSetVal(16) == 1 && p->sankranti_zodiac >= 0)
	{
		//double h1, m1;
		//m1 = modf(p->sankranti_day.shour*24, &h1);
		str2.Format(" %s %s (%s %s %s %d %s, %02d:%02d %s) "
			, GetSankrantiName(p->sankranti_zodiac)
			, gstr[56].c_str()
			, gstr[111].c_str(), GetSankrantiNameEn(p->sankranti_zodiac)
			, gstr[852].c_str()
			, p->sankranti_day.day, AvcGetMonthAbr(p->sankranti_day.month)
			, p->sankranti_day.GetHour(), p->sankranti_day.GetMinuteRound()
			, AvcGetDSTSignature(p->nDST));
		int length = str2.GetLength();
		int seplen = _tcslen(gpszSeparator);
		length = (seplen - length) / 2;
		str += (gpszSeparator + (seplen - length));
		str += str2;
		str += (gpszSeparator + (seplen - length));
		str += "\\par\r\n";
	}

	if (GetShowSetVal(7) == 1 && p->was_ksaya)//(m_dshow.m_info_ksaya) && (pvd->was_ksaya))
	{
		double h, m;
		VCTIME dd;
		m = modf(p->ksaya_time1*24, &h);
		dd = p->date;
		if (p->ksaya_day1 < 0.0)
			dd.PreviousDay();
		str2.Format("%d %s, %02d:%02d", dd.day, AvcGetMonthAbr(dd.month), int(h), int(m*60));

//				if (pvd->ksaya_time2 < 0.0)
//					m = modf(fabs(1.0 + pvd->ksaya_time2)*24, &h);
//				else
		m = modf(p->ksaya_time2*24, &h);
		dd = p->date;
		if (p->ksaya_day2 < 0.0)
			dd.PreviousDay();
		str3.Format("%d %s, %02d:%02d", dd.day, AvcGetMonthAbr(dd.month), int(h), int(m*60));

		str4.Format("%s %s %s %s %s (%s)\\par\r\n", gstr[89].c_str(), gstr[850].c_str(), str2.c_str(), gstr[851].c_str(), str3.c_str(), AvcGetDSTSignature(p->nDST));
		str += str4;
	}
	// adding fasting
	if (GetShowSetVal(8) == 1)//(m_dshow.m_info_vriddhi) && (pvd->is_vriddhi))
	{
		if (p->is_vriddhi)
		{
			str += gstr[90];
			str += "\\par\r\n";
		}
	}


	if (p->nCaturmasya & CMASYA_PURN_MASK)
	{
		str2.Format("%s [PURNIMA SYSTEM]\\par\r\n"
			, gstr[107 + (p->nCaturmasya & CMASYA_PURN_MASK_DAY)
					   + ((p->nCaturmasya & CMASYA_PURN_MASK_MASA) >> 2)].c_str()
			);
		str += str2;
		if ((p->nCaturmasya & CMASYA_PURN_MASK_DAY) == 0x1)
		{
			str += gstr[110 + ((p->nCaturmasya & CMASYA_PURN_MASK_MASA) >> 2)].c_str();
		}
	}

	if (p->nCaturmasya & CMASYA_PRAT_MASK)
	{
		str2.Format("%s [PRATIPAT SYSTEM]\\par\r\n"
			, gstr[107 + ((p->nCaturmasya & CMASYA_PRAT_MASK_DAY) >> 8)
					   + ((p->nCaturmasya & CMASYA_PRAT_MASK_MASA) >> 10)].c_str()
			);
		str += str2;
		if ((p->nCaturmasya & CMASYA_PRAT_MASK_DAY) == 0x100)
		{
			str += gstr[110 + ((p->nCaturmasya & CMASYA_PRAT_MASK_MASA) >> 10)].c_str();
			str += "\\par\r\n";
		}
	}

	if (p->nCaturmasya & CMASYA_EKAD_MASK)
	{
		str2.Format("%s [EKADASI SYSTEM]\\par\r\n"
			, gstr[107 + ((p->nCaturmasya & CMASYA_EKAD_MASK_DAY) >> 16)
					   + ((p->nCaturmasya & CMASYA_EKAD_MASK_MASA) >> 18)].c_str()
			);
		str += str2;
		if ((p->nCaturmasya & CMASYA_EKAD_MASK_DAY) == 0x10000)
		{
			str += gstr[110 + ((p->nCaturmasya & CMASYA_EKAD_MASK_MASA) >> 18)].c_str();
			str += "\\par\r\n";
		}
	}
			// tithi at arunodaya
			if (GetShowSetVal(0) == 1)//m_dshow.m_tithi_arun)
			{
				str2.Format("%s: %s\\par\r\n", gstr[98].c_str(), GetTithiName(p->astrodata.nTithiArunodaya));
				str += str2;
			}

			//"Arunodaya Time",//1
			if (GetShowSetVal(1) == 1)//m_dshow.m_arunodaya)
			{
				str2.Format("%s %d:%02d (%s)\\par\r\n", gstr[99].c_str(), p->astrodata.sun.arunodaya.hour
					, p->astrodata.sun.arunodaya.min, AvcGetDSTSignature(p->nDST));
				str += str2;
			}

			//"Moonrise Time",//4
			if (GetShowSetVal(4) == 1)
			{
				if (p->moonrise.hour < 0)
					str2 = gstr[136];
				else
				{
					str2.Format("%s %d:%02d (%s)", gstr[53].c_str(), p->moonrise.hour
						, p->moonrise.min, AvcGetDSTSignature(p->nDST));
				}
				str += str2;
				str += "\\par\r\n";
			}
			//"Moonset Time",//5
			if (GetShowSetVal(5) == 1)
			{
				if (p->moonrise.hour < 0)
					str2 = gstr[137];
				else
				{
					str2.Format("%s %d:%02d (%s)", gstr[54].c_str(), p->moonset.hour
						, p->moonset.min, AvcGetDSTSignature(p->nDST));
				}
				str += str2;
				str += "\\par\r\n";
			}
			///"Sun Longitude",//9
			if (GetShowSetVal(9) == 1)//m_dshow.m_sun_long)
			{
				str2.Format("%s: %f (*)\\par\r\n", gstr[100].c_str(), p->astrodata.sun.longitude_deg);
				str += str2;
			}
			//"Moon Longitude",//10
			if (GetShowSetVal(10) == 1)//m_dshow.m_sun_long)
			{
				str2.Format("%s: %f (*)\\par\r\n", gstr[101].c_str(), p->astrodata.moon.longitude_deg);
				str += str2;
			}
			//"Ayanamsha value",//11
			if (GetShowSetVal(11) == 1)//m_dshow.m_sun_long)
			{
				str2.Format("%s %f (%s) (*)\\par\r\n", gstr[102].c_str(), p->astrodata.msAyanamsa, GetAyanamsaName(GetAyanamsaType()));
				str += str2;
			}
			//"Julian Day",//12
			if (GetShowSetVal(12) == 1)//m_dshow.m_sun_long)
			{
				str2.Format("%s %f (*)\\par\r\n", gstr[103].c_str(), p->astrodata.jdate);
				str += str2;
			}

	/*BEGIN GCAL 1.4.3*/
	DAYTIME tdA, tdB;

	if (GetShowSetVal(45))
	{
		tdA = p->astrodata.sun.rise;
		tdB = p->astrodata.sun.rise;
		tdA -= 96;
		tdB -= 48;
		str2.Format("\\par\r\nBrahma Muhurta %2d:%02d - %2d:%02d (%s)", 
			tdA.hour, tdA.min, tdB.hour, tdB.min, AvcGetDSTSignature(p->nDST));
		str += str2;
	}

	if (GetShowSetVal(29))
	{
		str2.Format("\\par\r\n%s %2d:%02d ",
			gstr[51].c_str(), p->astrodata.sun.rise.hour, p->astrodata.sun.rise.min );
		str += str2;
		if (GetShowSetVal(32))
		{
			tdA = p->astrodata.sun.rise;
			tdB = p->astrodata.sun.rise;
			tdA -= 24;
			tdB += 24;
			str2.Format(" sandhya %2d:%02d - %2d:%02d ", tdA.hour, tdA.min, tdB.hour, tdB.min);
			str += str2;
		}
		str2.Format(" (%s)\\par\r\n", AvcGetDSTSignature(p->nDST));
		str += str2;
	}
	if (GetShowSetVal(30))
	{
		str2.Format("%s    %2d:%02d ", gstr[857].c_str(), p->astrodata.sun.noon.hour, p->astrodata.sun.noon.min);
		str += str2;
		if (GetShowSetVal(32))
		{
			tdA = p->astrodata.sun.noon;
			tdB = p->astrodata.sun.noon;
			tdA -= 24;
			tdB += 24;
			str2.Format(" sandhya %2d:%02d - %2d:%02d ", tdA.hour, tdA.min, tdB.hour, tdB.min);
			str += str2;
		}
		str2.Format(" (%s)\\par\r\n", AvcGetDSTSignature(p->nDST));
		str += str2;
	}
	if (GetShowSetVal(31))
	{
		str2.Format("%s  %2d:%02d ", gstr[52].c_str(), p->astrodata.sun.set.hour, p->astrodata.sun.set.min);
		str += str2;
		if (GetShowSetVal(32))
		{
			tdA = p->astrodata.sun.set;
			tdB = p->astrodata.sun.set;
			tdA -= 24;
			tdB += 24;
			str2.Format(" sandhya %2d:%02d - %2d:%02d ", tdA.hour, tdA.min, tdB.hour, tdB.min);
			str += str2;
		}
		str2.Format(" (%s)\\par\r\n", AvcGetDSTSignature(p->nDST));
		str += str2;
	}
	if (GetShowSetVal(33))
	{
		str2.Format("\\par\r\n%s info\\par\r\n   Moon in %s %s",
			gstr[51].c_str(), 
			GetNaksatraName(p->astrodata.nNaksatra), gstr[15].c_str());
		str += str2;
		if (GetShowSetVal(47))
		{
			str2.Format(", %.1f%% passed (%s Pada)", p->astrodata.nNaksatraElapse, gstr[811+int(p->astrodata.nNaksatraElapse/25)].c_str());
			str += str2;
		}
		if (GetShowSetVal(46))
		{
			str2.Format(", Moon in %s %s", GetSankrantiName(p->astrodata.nMoonRasi), gstr[105].c_str());
			str += str2;
		}
		str2.Format(", %s %s\\par\r\n   Sun in %s %s,\\par\r\n",
			GetYogaName(p->astrodata.nYoga), gstr[104].c_str(),
			GetSankrantiName(p->astrodata.nSunRasi), gstr[105].c_str());
		str += str2;
	}
	/* END GCAL 1.4.3 */

	AddNoteRtf(str);
}

void CalcAppDay(CLocationRef &location, VCTIME event, TResultApp & app)
{
	//MOONDATA moon;
	//SUNDATA sun;
	DAYDATA &d = app.details;
	double dd;
	TString str;
	VCTIME vc = event;
	VCTIME vcsun = event;
	VCTIME dprev, dnext;
	EARTHDATA m_earth = (EARTHDATA)location;

	app.b_adhika = false;
	app.event = event;
	app.location = location;
	
	//d.nTithi = GetPrevTithiStart(m_earth, vc, dprev);
	//GetNextTithiStart(m_earth, vc, dnext);
	vcsun.shour -= vcsun.tzone/24.0;
	vcsun.NormalizeValues();
	vcsun.tzone = 0.0;
	SunPosition(vcsun, m_earth, d.sun, vcsun.shour - 0.5);
	MoonCalc(vcsun.GetJulianComplete(), d.moon, m_earth);
	d.msDistance = put_in_360( d.moon.longitude_deg - d.sun.longitude_deg - 180.0);
	d.msAyanamsa = GetAyanamsa( vc.GetJulianComplete() );

	// tithi
	dd = d.msDistance / 12.0;
	d.nTithi = int(floor(dd));
	d.nTithiElapse = (dd - floor(dd)) * 100.0;
	d.nPaksa = (d.nTithi >= 15) ? 1 : 0;


	// naksatra
	dd = put_in_360( d.moon.longitude_deg - d.msAyanamsa );
	dd = ( dd * 3.0) / 40.0;
	d.nNaksatra = int(floor(dd));
	d.nNaksatraElapse = (dd - floor(dd)) * 100.0;
	d.nMasa = MasaCalc(vc, d, m_earth, d.nGaurabdaYear);
	d.nMoonRasi = GetRasi(d.moon.longitude_deg, d.msAyanamsa);
	d.nSunRasi = GetRasi(d.sun.longitude_deg, d.msAyanamsa);

	if (d.nMasa == ADHIKA_MASA)
	{
		d.nMasa = GetRasi(d.sun.longitude_deg, d.msAyanamsa);
		app.b_adhika = true;
	}

	vc.Today();
	vc.tzone = m_earth.tzone;
	int m = 0;
	VATIME va;
	VCTIME vctemp;

	va.tithi = d.nTithi;
	va.masa  = d.nMasa;
	va.gyear = GetGaurabdaYear(vc, m_earth);
	if (va.gyear < d.nGaurabdaYear)
		va.gyear = d.nGaurabdaYear;


	for(int i = 0; i < 6; i++)
	{
		VATIMEtoVCTIME(va, vctemp, m_earth);
		if (va.gyear > d.nGaurabdaYear)
		{
			if (m < TRESULT_APP_CELEBS)
			{
				app.celeb_date[m] = vctemp;
				app.celeb_gy[m] = va.gyear;
				m++;
			}
		}
		va.gyear++;
	}
}

void FormatAppDayText(TResultApp & app, TString &strResult)
{
	//MOONDATA moon;
	//SUNDATA sun;
	DAYDATA &d = app.details;
	TString str;
	VCTIME vc = app.event;
	EARTHDATA m_earth = (EARTHDATA)app.location;
	TString & strText = strResult;
//	int nHour, nMin;
	
//	nHour = int(vc.shour * 24);
//	nMin = int((vc.shour*24 - nHour)*60);

	AddTextLine(strText, gstr[25]);
	AddTextLine(strText, "");

	str.Format("%15s : %d %s %d", gstr[7].c_str(), vc.day, AvcGetMonthAbr(vc.month), vc.year);
	AddTextLine(strText, str);

	str.Format("%15s : %d:%02d", gstr[8].c_str(), vc.GetHour(), vc.GetMinuteRound());
	AddTextLine(strText, str);
	AddTextLine(strText, "");

	str.Format("%15s : %s", gstr[9].c_str(), app.location.m_strName);
	AddTextLine(strText, str);
	str.Format("%15s : %s", gstr[10].c_str(), app.location.m_strLatitude);
	AddTextLine(strText, str);
	str.Format("%15s : %s", gstr[11].c_str(), app.location.m_strLongitude);
	AddTextLine(strText, str);
	str.Format("%15s : ", gstr[12].c_str());
	str += app.location.m_strTimeZone;
	str += "  ";
	str += TTimeZone::GetTimeZoneName(app.location.m_nDST);
	AddTextLine(strText, str);
	str.Format("%15s : N/A", "DST");
	AddTextLine(strText, str);
	AddTextLine(strText, "");

	str.Format("%15s : %s", gstr[13].c_str(), GetTithiName(d.nTithi));
	AddTextLine(strText, str);
	str.Format("%15s : %.2f %%", gstr[14].c_str(), d.nTithiElapse);
	AddTextLine(strText, str);
	str.Format("%15s : %s", gstr[15].c_str(), GetNaksatraName(d.nNaksatra));
	AddTextLine(strText, str);
	str.Format("%15s : %.2f %% (%s pada)", gstr[16].c_str(), d.nNaksatraElapse,
		gstr[811+int(d.nNaksatraElapse/25.0)].c_str());
	AddTextLine(strText, str);
	str.Format("%15s : %s (%s)", "Moon Rasi", GetSankrantiName(d.nMoonRasi), GetSankrantiNameEn(d.nMoonRasi));
	AddTextLine(strText, str);
	str.Format("%15s : %s (%s)", "Sun Rasi", GetSankrantiName(d.nSunRasi), GetSankrantiNameEn(d.nSunRasi));
	AddTextLine(strText, str);

	str.Format("%15s : %s", gstr[20].c_str(), GetPaksaName(d.nPaksa));
	AddTextLine(strText, str);
	if (app.b_adhika == true)
	{
		str.Format("%15s : %s %s", gstr[22].c_str(), GetMasaName(d.nMasa), gstr[21].c_str());
	}
	else
		str.Format("%15s : %s", gstr[22].c_str(), GetMasaName(d.nMasa));
	AddTextLine(strText, str);
	str.Format("%15s : %d", gstr[23].c_str(), d.nGaurabdaYear);
	AddTextLine(strText, str);

	if (GetShowSetVal(48))
	{
		AddTextLine(strText, "");
		AddTextLine(strText, gstr[17].c_str());
		AddTextLine(strText, "");

		str.Format("%25s : %s... ", gstr[18].c_str() , GetNaksatraChildSylable(d.nNaksatra, int(d.nNaksatraElapse/25.0)));
		AddTextLine(strText, str);
		str.Format("%25s : %s... ", gstr[19].c_str(), GetRasiChildSylable(d.nMoonRasi));
		AddTextLine(strText, str);
	}

	AddTextLine(strText, "");
	AddTextLine(strText, gstr[24].c_str());
	AddTextLine(strText, "");

	for(int o = 0; o < TRESULT_APP_CELEBS; o++)
	{
		str.Format("   Gaurabda %3d : %d %s %d", app.celeb_gy[o] , app.celeb_date[o].day,
			AvcGetMonthAbr(app.celeb_date[o].month), 
			app.celeb_date[o].year);
		AddTextLine(strText, str);
	}

}

void FormatAppDayRtf(TResultApp & app, TString &strResult)
{
	//MOONDATA moon;
	//SUNDATA sun;
	DAYDATA &d = app.details;
	TString str;
	VCTIME vc = app.event;
	EARTHDATA m_earth = (EARTHDATA)app.location;
	TString & strText = strResult;
//	int nHour, nMin;
	
//	nHour = int(vc.shour * 24);
//	nMin = int((vc.shour*24 - nHour)*60);

	strText = "";
	AppendRtfHeader(strText);

	str.Format("\\par\\pard{\\f2\\fs%d %s}", g_HeaderSize, gstr[25]);
	strText += str;
	str.Format("\\par\\pard\\f2\\fs%d\r\n", g_TextSize);
	strText += str;

	str.Format("\\tab %s : {\\b %d %s %d}", gstr[7].c_str(), vc.day, AvcGetMonthAbr(vc.month), vc.year);
	AddTextLineRtf(strText, str);

	str.Format("\\tab %s : {\\b %d:%02d}", gstr[8].c_str(), vc.GetHour(), vc.GetMinuteRound());
	AddTextLineRtf(strText, str);
	AddTextLineRtf(strText, "");

	str.Format("\\tab %s : {\\b %s}", gstr[9].c_str(), app.location.m_strName);
	AddTextLineRtf(strText, str);
	str.Format("\\tab %s : {\\b %s}", gstr[10].c_str(), app.location.m_strLatitude);
	AddTextLineRtf(strText, str);
	str.Format("\\tab %s : {\\b %s}", gstr[11].c_str(), app.location.m_strLongitude);
	AddTextLineRtf(strText, str);
	str.Format("\\tab %s : {\\b ", gstr[12].c_str());
	str += TTimeZone::GetTimeZoneName(app.location.m_nDST);
	str += "}";
	AddTextLineRtf(strText, str);
	str.Format("\\tab %s : {\\b N/A}", "DST");
	AddTextLineRtf(strText, str);
	AddTextLineRtf(strText, "");

	str.Format("\\tab %s : {\\b %s}", gstr[13].c_str(), GetTithiName(d.nTithi));
	AddTextLineRtf(strText, str);
	str.Format("\\tab %s : {\\b %.2f %%}", gstr[14].c_str(), d.nTithiElapse);
	AddTextLineRtf(strText, str);
	str.Format("\\tab %s : {\\b %s}", gstr[15].c_str(), GetNaksatraName(d.nNaksatra));
	AddTextLineRtf(strText, str);
	str.Format("\\tab %s : {\\b %.2f %% (%s pada)}", gstr[16].c_str(), d.nNaksatraElapse,
		gstr[811+int(d.nNaksatraElapse/25.0)].c_str());
	AddTextLineRtf(strText, str);
	str.Format("\\tab %s : {\\b %s (%s)}", "Moon Rasi", GetSankrantiName(d.nMoonRasi), GetSankrantiNameEn(d.nMoonRasi));
	AddTextLineRtf(strText, str);
	str.Format("\\tab %s : {\\b %s (%s)}", "Sun Rasi", GetSankrantiName(d.nSunRasi), GetSankrantiNameEn(d.nSunRasi));
	AddTextLineRtf(strText, str);

	str.Format("\\tab %s : {\\b %s}", gstr[20].c_str(), GetPaksaName(d.nPaksa));
	AddTextLineRtf(strText, str);
	if (app.b_adhika == true)
	{
		str.Format("\\tab %s : {\\b %s %s}", gstr[22].c_str(), GetMasaName(d.nMasa), gstr[21].c_str());
	}
	else
		str.Format("\\tab %s : {\\b %s}", gstr[22].c_str(), GetMasaName(d.nMasa));
	AddTextLineRtf(strText, str);
	str.Format("\\tab %s : {\\b %d}", gstr[23].c_str(), d.nGaurabdaYear);
	AddTextLineRtf(strText, str);

	if (GetShowSetVal(48))
	{
		AddTextLineRtf(strText, "");
		str.Format("{\\fs%d %s}", g_Header2Size, gstr[17].c_str());
		AddTextLineRtf(strText, str);
		AddTextLineRtf(strText, "");
		str.Format("\\tab %s : {\\b %s... }", gstr[18].c_str() , GetNaksatraChildSylable(d.nNaksatra, int(d.nNaksatraElapse/25.0)));
		AddTextLineRtf(strText, str);
		str.Format("\\tab %s : {\\b %s... }", gstr[19].c_str(), GetRasiChildSylable(d.nMoonRasi));
		AddTextLineRtf(strText, str);
	}

	AddTextLineRtf(strText, "");
	str.Format("{\\fs%d %s}", g_Header2Size, gstr[24].c_str());
	AddTextLineRtf(strText, str);
	AddTextLineRtf(strText, "");

	for(int o = 0; o < TRESULT_APP_CELEBS; o++)
	{
		str.Format("\\tab Gaurabda %3d : {\\b %d %s %d}", app.celeb_gy[o] , app.celeb_date[o].day,
			AvcGetMonthAbr(app.celeb_date[o].month), 
			app.celeb_date[o].year);
		AddTextLineRtf(strText, str);
	}

	strText += "}";
}

void FormatAppDayXML(TResultApp &app, TString &strResult)
{
	DAYDATA &d = app.details;
	TString str;
	VCTIME vc = app.event;
	EARTHDATA m_earth = (EARTHDATA)app.location;
	CLocationRef & loc = app.location;
	TString & strText = strResult;
	int npada;
	BOOL bDuringAdhika = FALSE;

	strText.Format(
		"<xml>\n"
		"\t<request name=\"AppDay\" version=\"%s\">\n"
		"\t\t<arg name=\"longitude\" value=\"%+f\" />\n"
		"\t\t<arg name=\"latitude\" value=\"%+f\" />\n"
		"\t\t<arg name=\"timezone\" value=\"%+f\" />\n"
		"\t\t<arg name=\"year\" value=\"%d\" />\n"
		"\t\t<arg name=\"month\" value=\"%d\" />\n"
		"\t\t<arg name=\"day\" value=\"%d\" />\n"
		"\t\t<arg name=\"hour\" value=\"%d\" />\n"
		"\t\t<arg name=\"minute\" value=\"%d\" />\n"
		"\t</request>\n", gstr[130].c_str(),
		loc.m_fLongitude, loc.m_fLatitude, loc.m_fTimezone,
		app.event.year, app.event.month, app.event.day, app.event.GetHour(), app.event.GetMinuteRound()
		);


	npada = int (d.nNaksatraElapse / 25.0) + 1;
	if (npada > 4)
		npada = 4;

	str.Format("\t<result name=\"AppDay\" >\n"
		"\t\t<tithi name=\"%s\" elapse=\"%f\" />\n"
		"\t\t<naksatra name=\"%s\" elapse=\"%f\" pada=\"%d\"/>\n"
		"\t\t<paksa name=\"%s\" />\n"
		"\t\t<masa name=\"%s\" adhikamasa=\"%s\"/>\n"
		"\t\t<gaurabda value=\"%d\" />\n"

		, GetTithiName(d.nTithi), d.nTithiElapse
		, GetNaksatraName(d.nNaksatra), d.nNaksatraElapse, npada
		, GetPaksaName(d.nPaksa)
		, GetMasaName(d.nMasa), (bDuringAdhika ? "yes" : "no")
		, d.nGaurabdaYear
		);

	strText += str;

	strText += "\t\t<celebrations>\n";
	for(int i =0; i < TRESULT_APP_CELEBS; i++)
	{
		str.Format("\t\t\t<celebration gaurabda=\"%d\" day=\"%d\" month=\"%d\" monthabr=\"%s\" year=\"%d\" />\n"
			, app.celeb_gy[i], app.celeb_date[i].day, app.celeb_date[i].month, AvcGetMonthAbr(app.celeb_date[i].month), app.celeb_date[i].year);
		strText += str;
	}

	strText += "\t\t</celebrations>\n\t</result>\n</xml>\n";
}

int CalcMasaList(TResultMasaList &mlist, CLocationRef &loc, int nYear, int nCount)
{
	DAYDATA day;
	VCTIME d, de, t;
	int lm = -1;

	mlist.n_startYear = nYear;
	mlist.n_countYears = nCount;
	mlist.vc_start = d  = GetFirstDayOfYear((EARTHDATA)loc, nYear);
	mlist.vc_end   = de = GetFirstDayOfYear((EARTHDATA)loc, nYear + nCount);
	mlist.m_location = loc;

	if (mlist.alloc(nCount) == false)
		return 0;

	int i = 0;
	int prev_paksa = -1;
	int prev_gyear = -1;
	int current = 0;


	EARTHDATA earth = (EARTHDATA)loc;
	AvcProgressWindowCreate();
	while(d.IsBeforeThis(de))
	{
		DayCalc(d, earth, day);
		if (prev_paksa != day.nPaksa)
		{
			day.nMasa = MasaCalc(d, day, earth, day.nGaurabdaYear);
			
			if (lm != day.nMasa)
			{
				if (lm >= 0)
				{
					t = d;
					t.PreviousDay();
					mlist.arr[current].vc_end = t;
					current++;
				}
				lm = day.nMasa;
				mlist.arr[current].masa = day.nMasa;
				mlist.arr[current].year = day.nGaurabdaYear;
				mlist.arr[current].vc_start = d;
			}
		}
		prev_paksa = day.nPaksa;
		d.NextDay();
		i ++;
		AvcProgressWindowSetPos(i / (3 * nCount));
	}

	t = d;
	mlist.arr[current].vc_end = t;
	current++;
	mlist.n_countMasa = current;

	AvcProgressWindowClose();
	return 1;
}

int FormatMasaListText(TResultMasaList &mlist, TString &str)
{
	TString stt;
	TString stt2;

	str.Format(" %s\r\n\r\n%s: %s\r\n", gstr[39].c_str(), gstr[40].c_str(), mlist.m_location.m_strFullName.c_str());
	stt.Format("%s %d %s %d %s %d %s %d\r\n", gstr[41].c_str(), mlist.vc_start.day, AvcGetMonthAbr(mlist.vc_start.month), mlist.vc_start.year
		, gstr[42].c_str(), mlist.vc_end.day, AvcGetMonthAbr(mlist.vc_end.month), mlist.vc_end.year);
	str += stt;
	str += "==================================================================\r\n\r\n";

	int i;

	for(i = 0; i < mlist.n_countMasa; i++)
	{
		stt.Format("%s %d                               ", GetMasaName(mlist.arr[i].masa), mlist.arr[i].year);
		stt.Left(30, stt2);
		str += stt2;
		stt.Format("   %d %s %d - ", mlist.arr[i].vc_start.day, AvcGetMonthAbr(mlist.arr[i].vc_start.month), mlist.arr[i].vc_start.year);
		stt.Right(16, stt2);
		str += stt2;
		stt.Format("   %d %s %d\r\n", mlist.arr[i].vc_end.day, AvcGetMonthAbr(mlist.arr[i].vc_end.month), mlist.arr[i].vc_end.year);
		stt.Right(13, stt2);
		str += stt2;
	}

	return 1;
}

int FormatMasaListRtf(TResultMasaList &mlist, TString &str)
{
	TString stt;
	TString stt2;

	str = "";
	AppendRtfHeader(str);

	stt.Format("{\\fs%d\\f2 %s}\\par\\tx%d\\tx%d\\f2\\fs%d\r\n\\par\r\n%s: %s\\par\r\n"
		, g_HeaderSize
		, gstr[39].c_str(), 1000*g_TextSize/24, 4000*g_TextSize/24
		, g_TextSize, gstr[40].c_str(), mlist.m_location.m_strFullName.c_str());
	str += stt;
	stt.Format("%s %d %s %d %s %d %s %d\\par\r\n", gstr[41].c_str(), mlist.vc_start.day, AvcGetMonthAbr(mlist.vc_start.month), mlist.vc_start.year
		, gstr[42].c_str(), mlist.vc_end.day, AvcGetMonthAbr(mlist.vc_end.month), mlist.vc_end.year);
	str += stt;
	str += "==================================================================\\par\r\n\\par\r\n";

	int i;

	for(i = 0; i < mlist.n_countMasa; i++)
	{
		stt2.Format("\\tab %s %d\\tab ", GetMasaName(mlist.arr[i].masa), mlist.arr[i].year);
		str += stt2;
		stt2.Format("%d %s %d - ", mlist.arr[i].vc_start.day, AvcGetMonthAbr(mlist.arr[i].vc_start.month), mlist.arr[i].vc_start.year);
		str += stt2;
		stt2.Format("%d %s %d\\par\r\n", mlist.arr[i].vc_end.day, AvcGetMonthAbr(mlist.arr[i].vc_end.month), mlist.arr[i].vc_end.year);
		str += stt2;
	}

	AddNoteRtf(str);

	str += "}";

	return 1;
}

int FormatCalendarDayRtf(VAISNAVADAY * pvd, TString &dayText) 
{
	TString str, str2, str3;
	int nFestClass;

		dayText.Empty();
		/* BEGIN GCAL 1.4.3 */
		pvd->GetTextRtf(str, GetShowSetVal(39), GetShowSetVal(36), GetShowSetVal(37), GetShowSetVal(38), GetShowSetVal(41));
		/* END GCAL 1.4.3 */
		//str.Mid(16, str.GetLength(), str2);
		//str.Left(15, str3);
		//str = str3;
		if (pvd->astrodata.sun.longitude_deg < 0.0)
		{
			dayText += "\\par\\tab No rise and no set of the sun. No calendar information.";
			return 1;
		}
		dayText += str;
//		AddListRtf(dayText, str, str2);

		if (GetShowSetVal(17) == 1)
		{
			if (pvd->ekadasi_parana)
			{
				pvd->GetTextEP(str);
				str.Delete(0, 17);
				AddListRtf(dayText, str);
			}
		}

		if (GetShowSetVal(6) == 1)
		{
			if (pvd->festivals.GetLength() > 0)
			{
				int i = pvd->GetHeadFestival();
				while(pvd->GetNextFestival(i, str2))
				{
					if (str2.GetLength() > 1)
					{
						nFestClass = pvd->GetFestivalClass(str2);
						if (nFestClass < 0 || GetShowSetVal(22 + nFestClass) == 1)
							AddListRtf(dayText, str2);
					}
				}
			}
		}

		if (GetShowSetVal(16) == 1 && pvd->sankranti_zodiac >= 0)
		{
			//double h1, m1;
			//m1 = modf(pvd->sankranti_day.shour*24, &h1);
			str.Format("{\\i %s %s (%s %s %s %d %s, %02d:%02d %s) }"
				, GetSankrantiName(pvd->sankranti_zodiac)
				, gstr[56].c_str()
				, gstr[111].c_str(), GetSankrantiNameEn(pvd->sankranti_zodiac)
				, gstr[852].c_str()
				, pvd->sankranti_day.day, AvcGetMonthAbr(pvd->sankranti_day.month)
				, pvd->sankranti_day.GetHour(), pvd->sankranti_day.GetMinuteRound()
				, AvcGetDSTSignature(pvd->nDST));
			int length = str.GetLength();
			int seplen = _tcslen(gpszSeparator);
			length = (seplen - length) / 2;
			dayText += "\\par ";
			dayText += (gpszSeparator + (seplen - length));
			dayText += str;
			dayText += (gpszSeparator + (seplen - length));
			//dayText += "\\par\r\n";
		}

		if (GetShowSetVal(7) == 1 && pvd->was_ksaya)//(m_dshow.m_info_ksaya) && (pvd->was_ksaya))
		{
			double h, m;
			VCTIME ksayaDate;

			// zaciatok ksaya tithi
			m = modf(pvd->ksaya_time1*24, &h);
			ksayaDate = pvd->date;
			if (pvd->ksaya_day1 < 0.0)
				ksayaDate.PreviousDay();
			str2.Format("%d %s %02d:%02d", ksayaDate.day, AvcGetMonthAbr(ksayaDate.month), int(h), int(m*60));

			// end of ksaya tithi
			m = modf(pvd->ksaya_time2*24, &h);
			ksayaDate = pvd->date;
			if (pvd->ksaya_day2 < 0.0)
				ksayaDate.PreviousDay();
			str3.Format("%d %s %02d:%02d", ksayaDate.day, AvcGetMonthAbr(ksayaDate.month), int(h), int(m*60));

			// print info
			str.Format("%s: %s -- %s %s %s (%s)", gstr[89].c_str(), GetTithiName((pvd->astrodata.nTithi + 29)%30), str2.c_str(), gstr[851].c_str(), str3.c_str(), AvcGetDSTSignature(pvd->nDST));
			AddListRtf(dayText, str);
		}

		if (GetShowSetVal(8) == 1)//(m_dshow.m_info_vriddhi) && (pvd->is_vriddhi))
		{
			if (pvd->is_vriddhi)
				AddListRtf(dayText, gstr[90]);
		}

		if (pvd->nCaturmasya & CMASYA_CONT_MASK)
		{
			int n = ((pvd->nCaturmasya & CMASYA_CONT_MASK) >> 22);
			AddListRtf(dayText, gstr[ 111 + n ]);
		}

		if ((GetShowSetVal(13) == 1) && (pvd->nCaturmasya & CMASYA_PURN_MASK))
		{
			str.Format("%s [PURNIMA SYSTEM]"
				, gstr[107 + (pvd->nCaturmasya & CMASYA_PURN_MASK_DAY)
					       + ((pvd->nCaturmasya & CMASYA_PURN_MASK_MASA) >> 2)].c_str()
				);
			AddListRtf(dayText, str);
			if ((pvd->nCaturmasya & CMASYA_PURN_MASK_DAY) == 0x1)
			{
				AddListRtf(dayText, gstr[110 + ((pvd->nCaturmasya & CMASYA_PURN_MASK_MASA) >> 2)].c_str() );
			}
		}

		if ((GetShowSetVal(14) == 1) && (pvd->nCaturmasya & CMASYA_PRAT_MASK))
		{
			str.Format("%s [PRATIPAT SYSTEM]"
				, gstr[107 + ((pvd->nCaturmasya & CMASYA_PRAT_MASK_DAY) >> 8)
					       + ((pvd->nCaturmasya & CMASYA_PRAT_MASK_MASA) >> 10)].c_str()
				);
			AddListRtf(dayText, str);
			if ((pvd->nCaturmasya & CMASYA_PRAT_MASK_DAY) == 0x100)
			{
				AddListRtf(dayText, gstr[110 + ((pvd->nCaturmasya & CMASYA_PRAT_MASK_MASA) >> 10)].c_str() );
			}
		}

		if ((GetShowSetVal(15) == 1) && (pvd->nCaturmasya & CMASYA_EKAD_MASK))
		{
			str.Format("%s [EKADASI SYSTEM]"
				, gstr[107 + ((pvd->nCaturmasya & CMASYA_EKAD_MASK_DAY) >> 16)
					       + ((pvd->nCaturmasya & CMASYA_EKAD_MASK_MASA) >> 18)].c_str()
				);
			AddListRtf(dayText, str);
			if ((pvd->nCaturmasya & CMASYA_EKAD_MASK_DAY) == 0x10000)
			{
				AddListRtf(dayText, gstr[110 + ((pvd->nCaturmasya & CMASYA_EKAD_MASK_MASA) >> 18)].c_str() );
			}
		}

		// tithi at arunodaya
		if (GetShowSetVal(0) == 1)//m_dshow.m_tithi_arun)
		{
			str.Format("%s: %s", gstr[98].c_str(), GetTithiName(pvd->astrodata.nTithiArunodaya));
			AddListRtf(dayText, str);
		}

		//"Arunodaya Time",//1
		if (GetShowSetVal(1) == 1)//m_dshow.m_arunodaya)
		{
			str.Format("%s %d:%02d (%s)", gstr[99].c_str(), pvd->astrodata.sun.arunodaya.hour
				, pvd->astrodata.sun.arunodaya.min, AvcGetDSTSignature(pvd->nDST));
			AddListRtf(dayText, str);
		}
		//"Sunrise Time",//2
		//"Sunset Time",//3
		if (GetShowSetVal(2) == 1)//m_dshow.m_sunrise)
		{
			str.Format("%s %d:%02d (%s)", gstr[51].c_str(), pvd->astrodata.sun.rise.hour
				, pvd->astrodata.sun.rise.min, AvcGetDSTSignature(pvd->nDST));
			AddListRtf(dayText, str);
		}
		/* BEGIN GCAL 1.4.3 */
		// Noon time
		if (GetShowSetVal(34) == 1)//m_dshow.m_sunset)
		{
			str.Format("%s %d:%02d (%s)", gstr[857].c_str(), pvd->astrodata.sun.noon.hour
				, pvd->astrodata.sun.noon.min, AvcGetDSTSignature(pvd->nDST));
			AddListRtf(dayText, str);
		}
		/* END GCAL 1.4.3 */
		if (GetShowSetVal(3) == 1)//m_dshow.m_sunset)
		{
			str.Format("%s %d:%02d (%s)", gstr[52].c_str(), pvd->astrodata.sun.set.hour
				, pvd->astrodata.sun.set.min, AvcGetDSTSignature(pvd->nDST));
			AddListRtf(dayText, str);
		}
		//"Moonrise Time",//4
		if (GetShowSetVal(4) == 1)
		{
			if (pvd->moonrise.hour < 0)
				str = gstr[136].c_str();
			else
			{
				str.Format("%s %d:%02d (%s)", gstr[53].c_str(), pvd->moonrise.hour
					, pvd->moonrise.min, AvcGetDSTSignature(pvd->nDST));
			}
			AddListRtf(dayText, str);
		}
		//"Moonset Time",//5
		if (GetShowSetVal(5) == 1)
		{
			if (pvd->moonrise.hour < 0)
				str = gstr[137];
			else
			{
				str.Format("%s %d:%02d (%s)", gstr[54].c_str(), pvd->moonset.hour
					, pvd->moonset.min, AvcGetDSTSignature(pvd->nDST));
			}
			AddListRtf(dayText, str);
		}
		///"Sun Longitude",//9
		if (GetShowSetVal(9) == 1)//m_dshow.m_sun_long)
		{
			str.Format("%s: %f (*)", gstr[100].c_str(), pvd->astrodata.sun.longitude_deg);
			AddListRtf(dayText, str);
		}
		//"Moon Longitude",//10
		if (GetShowSetVal(10) == 1)//m_dshow.m_sun_long)
		{
			str.Format("%s: %f (*)", gstr[101].c_str(), pvd->astrodata.moon.longitude_deg);
			AddListRtf(dayText, str);
		}
		//"Ayanamsha value",//11
		if (GetShowSetVal(11) == 1)//m_dshow.m_sun_long)
		{
			str.Format("%s %f (%s) (*)", gstr[102].c_str(), pvd->astrodata.msAyanamsa, GetAyanamsaName(GetAyanamsaType()));
			AddListRtf(dayText, str);
		}
		//"Julian Day",//12
		if (GetShowSetVal(12) == 1)//m_dshow.m_sun_long)
		{
			str.Format("%s %f (*)", gstr[103].c_str(), pvd->astrodata.jdate);
			AddListRtf(dayText, str);
		}

	return 0;
}

void AppendRtfHeader(TString &m_text)
{
	m_text = "{\\rtf1\\ansi\\ansicpg1252\\deff2\\deflang1033{\\fonttbl{\\f0\\fswiss\\fcharset0 Lucida Console;}"
			"{\\f1\\fswiss\\fcharset0 Arial;}{\\f2\\froman\\fprq2\\fcharset0 Book Antiqua;}}"
			"{\\colortbl ;";
	AppendColorTable(m_text);
	m_text +=  "}{\\*\\generator GCAL;}\\viewkind4\\uc1\\pard\\f0\\fs20 ";
}

/****************************************************************************
*
*
*
*****************************************************************************/

int FormatCalendarRtf(TResultCalendar &daybuff, TString &m_text) 
{
	int k;
	int bShowColumnHeaders = 0;
	TString str, str2, str3, dayText;

	char * spaces = "                                                                                ";
	VAISNAVADAY * pvd, * prevd, *nextd;
	int lastmasa = -1;
	int lastmonth = -1;
//	int tp1;
//	double rate;
	bool bCalcMoon = (GetShowSetVal(4) > 0 || GetShowSetVal(5) > 0);

	m_text.Empty();

	AppendRtfHeader(m_text);

	for (k = 0; k < daybuff.m_vcCount; k++)
	{

		prevd = daybuff.GetDay(k - 1);
		pvd = daybuff.GetDay(k);
		nextd = daybuff.GetDay(k + 1);

		if (pvd)
		{
			bShowColumnHeaders = 0;
			if ((GetShowSetVal(18) == 1) && (pvd->astrodata.nMasa != lastmasa))
			{
				if (bShowColumnHeaders == 0)
					m_text += "\\par ";
				bShowColumnHeaders = 1;
//				m_text += "\\par\r\n";
				str.Format("\\par \\pard\\f2\\fs%d\\qc %s %s, Gaurabda %d", g_Header2Size
					, GetMasaName(pvd->astrodata.nMasa), gstr[22].c_str()
					, pvd->astrodata.nGaurabdaYear);
				if ((pvd->astrodata.nMasa == ADHIKA_MASA) && ((lastmasa >= SRIDHARA_MASA) && (lastmasa <= DAMODARA_MASA)))
				{
					str += "\\line ";
					str += gstr[128].c_str();
				}
//				m_text += "\\par ";
//				tp1 = (80 - str.GetLength())/2;
//				str.Insert(0, (spaces + (79 - tp1)));
//				str += spaces;
//				str.Insert(80 - _tcslen(AvcGetVersionText()), );
//				str.Left(80, str3);
				m_text += str;

//				m_text += "\\par\r\n\\par\r\n";
				/* BEGIN GCAL 1.4.3 */
				lastmasa = pvd->astrodata.nMasa;
			}

			if ((GetShowSetVal(19) == 1) && (pvd->date.month != lastmonth))
			{
				if (bShowColumnHeaders == 0)
					m_text += "\\par ";
				bShowColumnHeaders = 1;
				str.Format("\\par\\pard\\f2\\qc\\fs%d\r\n", g_Header2Size);
				m_text += str;
				str.Format("%s %d", gstr[759 + pvd->date.month].c_str(), pvd->date.year);
				//tp1 = (80 - str.GetLength())/2;
				//str.Insert(0, (spaces + (79 - tp1)));
				//str += spaces;
				//str.Insert(80 - _tcslen(AvcGetVersionText()), AvcGetVersionText());
				//str.Left(80, str3);
				m_text += str;
//				m_text += "\\par\r\n";
//				m_text += (spaces + (79 - (80 - daybuff.m_Location.m_strFullName.GetLength())/2));
//				m_text += daybuff.m_Location.m_strFullName;
				lastmonth = pvd->date.month;
			}

			// print location text
			if (bShowColumnHeaders)
			{
//				m_text += "\\par\r\n";
				m_text += "\\par\\pard\\qc\\cf2\\fs22 ";
//				m_text += (spaces + (79 - (80 - daybuff.m_Location.m_strFullName.GetLength())/2));
				m_text += daybuff.m_Location.m_strFullName;
//				m_text += "\\par\r\n";
			}

			if (bShowColumnHeaders)
			{
				str.Format("\\par\\pard\\fs%d\\qc %s", g_NoteSize, AvcGetVersionText());
				m_text += str;
				m_text += "\\par\\par\r\n";
			}


			if (bShowColumnHeaders)
			{
				int tabStop = 5760*g_TextSize/24;
				str.Format("\\pard\\tx%d\\tx%d ",2000*g_TextSize/24, tabStop);
				m_text += str;
				if (GetShowSetVal(39))
				{
					tabStop += 990*g_TextSize/24;
					str.Format("\\tx%d", tabStop);
					m_text += str;
				}
				if (GetShowSetVal(37))
				{
					tabStop += 1720*g_TextSize/24;
					str.Format("\\tx%d", tabStop);
					m_text += str;
				}
				if (GetShowSetVal(36))
				{
					tabStop += 1800*g_TextSize/24;
					str.Format("\\tx%d", tabStop);
					m_text += str;
				}
				if (GetShowSetVal(38))
				{
					tabStop += 750*g_TextSize/24;
					str.Format("\\tx%d", tabStop);
					m_text += str;
				}
				if (GetShowSetVal(41))
				{
					tabStop += 1850*g_TextSize/24;
					str.Format("\\tx%d", tabStop);
					m_text += str;
				}
				// paksa width 990
				// yoga width 1720
				// naks width 1800
				// fast width 990
				// rasi width 1850
				m_text += str;
				str.Format("{\\highlight15\\cf7\\fs%d\\b DATE\\tab TITHI", g_NoteSize);
				m_text += str;
				if (GetShowSetVal(39)) {
					m_text += "\\tab PAKSA";
				}
				if (GetShowSetVal(37)) {
					m_text += "\\tab YOGA";
				}
				if (GetShowSetVal(36)) {
					m_text += "\\tab NAKSATRA";
				}
				if (GetShowSetVal(38))
				{
					m_text += "\\tab FAST";
				}
				if (GetShowSetVal(41))
				{
					m_text += "\\tab RASI";
				}
				m_text += "}";
				//m_text += "\\par\r\n";
				//m_text += gpszSeparator;
			}
			str.Format("\\fs%d ", g_TextSize);
			m_text += str;
//			m_text += "\\fs24 ";

			FormatCalendarDayRtf(pvd, dayText);

			if (GetShowSetVal(21) == 1)
			{
				if (prevd != NULL)
				{
					if (prevd->astrodata.nMasa != pvd->astrodata.nMasa)
					{
						str.Format("%s %s %s", gstr[780].c_str(), GetMasaName(pvd->astrodata.nMasa), gstr[22].c_str());
						AddListRtf(dayText, str);
					}
				}
				if (nextd != NULL)
				{
					if (nextd->astrodata.nMasa != pvd->astrodata.nMasa)
					{
						str.Format("%s %s %s", gstr[781].c_str(), GetMasaName(pvd->astrodata.nMasa), gstr[22].c_str());
						AddListRtf(dayText, str);
					}
				}
			}
			/* BEGIN GCAL 1.4.3 */
			if (GetShowSetVal(35) && prevd && nextd)
			{
				if (prevd->nDST == 0 && pvd->nDST==1)
					AddListRtf(dayText, gstr[855].c_str());
				else if (pvd->nDST==1 && nextd->nDST==0)
					AddListRtf(dayText, gstr[856].c_str());
			}

			/* END GCAL 1.4.3 */

			if (GetShowSetVal(20) == 0)
				m_text += dayText;
			else if (dayText.GetLength() > 90)
				m_text += dayText;


		}
	}

	AddNoteRtf(m_text);

	m_text += "\r\n}\r\n";

	return 1;
}

void AppendColorTable(TString &str)
{
	str += "\\red0\\green0\\blue0;" //0
		"\\red16\\green16\\blue16;" //1
		"\\red32\\green32\\blue32;" //2
		"\\red48\\green48\\blue48;" //3
		"\\red64\\green64\\blue64;" //4
		"\\red80\\green80\\blue80;" //5
		"\\red96\\green96\\blue96;" //6
		"\\red112\\green112\\blue112;" //7
		"\\red128\\green128\\blue128;" // 8 
		"\\red143\\green143\\blue143;" // 9 
		"\\red159\\green159\\blue159;" // 10 
		"\\red175\\green175\\blue175;" // 11 
		"\\red191\\green191\\blue191;" // 12 
		"\\red207\\green207\\blue207;" // 13 
		"\\red223\\green223\\blue223;" // 14 
		"\\red239\\green239\\blue239;" // 15 
		"\\red255\\green255\\blue255;" // 16 
		"\\red0\\green0\\blue0;" //17
		"\\red31\\green0\\blue0;" //18
		"\\red63\\green0\\blue0;" //19
		"\\red95\\green0\\blue0;" //20
		"\\red127\\green0\\blue0;" //21
		"\\red159\\green0\\blue0;" //22
		"\\red191\\green0\\blue0;" //23
		"\\red223\\green0\\blue0;" //24
		"\\red255\\green0\\blue0;" // 25 
		"\\red255\\green31\\blue31;" // 26 
		"\\red255\\green63\\blue63;" // 27 
		"\\red255\\green95\\blue95;" // 28 
		"\\red255\\green127\\blue127;" // 29 
		"\\red255\\green159\\blue159;" // 30 
		"\\red255\\green191\\blue191;" // 31 
		"\\red255\\green223\\blue223;" // 32 
		"\\red255\\green255\\blue255;" // 33 
		"\\red0\\green0\\blue0;" //34
		"\\red31\\green16\\blue0;" //35
		"\\red63\\green32\\blue0;" //36
		"\\red95\\green48\\blue0;" //37
		"\\red127\\green64\\blue0;" //38
		"\\red159\\green80\\blue0;" //39
		"\\red191\\green96\\blue0;" //40
		"\\red223\\green112\\blue0;" //41
		"\\red255\\green128\\blue0;" // 42 
		"\\red255\\green143\\blue31;" // 43 
		"\\red255\\green159\\blue63;" // 44 
		"\\red255\\green175\\blue95;" // 45 
		"\\red255\\green191\\blue127;" // 46 
		"\\red255\\green207\\blue159;" // 47 
		"\\red255\\green223\\blue191;" // 48 
		"\\red255\\green239\\blue223;" // 49 
		"\\red255\\green255\\blue255;" // 50 
		"\\red0\\green0\\blue0;" //51
		"\\red31\\green31\\blue0;" //52
		"\\red63\\green63\\blue0;" //53
		"\\red95\\green95\\blue0;" //54
		"\\red127\\green127\\blue0;" //55
		"\\red159\\green159\\blue0;" //56
		"\\red191\\green191\\blue0;" //57
		"\\red223\\green223\\blue0;" //58
		"\\red255\\green255\\blue0;" // 59 
		"\\red255\\green255\\blue31;" // 60 
		"\\red255\\green255\\blue63;" // 61 
		"\\red255\\green255\\blue95;" // 62 
		"\\red255\\green255\\blue127;" // 63 
		"\\red255\\green255\\blue159;" // 64 
		"\\red255\\green255\\blue191;" // 65 
		"\\red255\\green255\\blue223;" // 66 
		"\\red255\\green255\\blue255;" // 67 
		"\\red0\\green0\\blue0;" //68
		"\\red16\\green31\\blue0;" //69
		"\\red32\\green63\\blue0;" //70
		"\\red48\\green95\\blue0;" //71
		"\\red64\\green127\\blue0;" //72
		"\\red80\\green159\\blue0;" //73
		"\\red96\\green191\\blue0;" //74
		"\\red112\\green223\\blue0;" //75
		"\\red128\\green255\\blue0;" // 76 
		"\\red143\\green255\\blue31;" // 77 
		"\\red159\\green255\\blue63;" // 78 
		"\\red175\\green255\\blue95;" // 79 
		"\\red191\\green255\\blue127;" // 80 
		"\\red207\\green255\\blue159;" // 81 
		"\\red223\\green255\\blue191;" // 82 
		"\\red239\\green255\\blue223;" // 83 
		"\\red255\\green255\\blue255;" // 84 
		"\\red0\\green0\\blue0;" //85
		"\\red0\\green31\\blue0;" //86
		"\\red0\\green63\\blue0;" //87
		"\\red0\\green95\\blue0;" //88
		"\\red0\\green127\\blue0;" //89
		"\\red0\\green159\\blue0;" //90
		"\\red0\\green191\\blue0;" //91
		"\\red0\\green223\\blue0;" //92
		"\\red0\\green255\\blue0;" // 93 
		"\\red31\\green255\\blue31;" // 94 
		"\\red63\\green255\\blue63;" // 95 
		"\\red95\\green255\\blue95;" // 96 
		"\\red127\\green255\\blue127;" // 97 
		"\\red159\\green255\\blue159;" // 98 
		"\\red191\\green255\\blue191;" // 99 
		"\\red223\\green255\\blue223;" // 100 
		"\\red255\\green255\\blue255;" // 101 
		"\\red0\\green0\\blue0;" //102
		"\\red0\\green31\\blue16;" //103
		"\\red0\\green63\\blue32;" //104
		"\\red0\\green95\\blue48;" //105
		"\\red0\\green127\\blue64;" //106
		"\\red0\\green159\\blue80;" //107
		"\\red0\\green191\\blue96;" //108
		"\\red0\\green223\\blue112;" //109
		"\\red0\\green255\\blue128;" // 110 
		"\\red31\\green255\\blue143;" // 111 
		"\\red63\\green255\\blue159;" // 112 
		"\\red95\\green255\\blue175;" // 113 
		"\\red127\\green255\\blue191;" // 114 
		"\\red159\\green255\\blue207;" // 115 
		"\\red191\\green255\\blue223;" // 116 
		"\\red223\\green255\\blue239;" // 117 
		"\\red255\\green255\\blue255;" // 118 
		"\\red0\\green0\\blue0;" //119
		"\\red0\\green31\\blue31;" //120
		"\\red0\\green63\\blue63;" //121
		"\\red0\\green95\\blue95;" //122
		"\\red0\\green127\\blue127;" //123
		"\\red0\\green159\\blue159;" //124
		"\\red0\\green191\\blue191;" //125
		"\\red0\\green223\\blue223;" //126
		"\\red0\\green255\\blue255;" // 127 
		"\\red31\\green255\\blue255;" // 128 
		"\\red63\\green255\\blue255;" // 129 
		"\\red95\\green255\\blue255;" // 130 
		"\\red127\\green255\\blue255;" // 131 
		"\\red159\\green255\\blue255;" // 132 
		"\\red191\\green255\\blue255;" // 133 
		"\\red223\\green255\\blue255;" // 134 
		"\\red255\\green255\\blue255;" // 135 
		"\\red0\\green0\\blue0;" //136
		"\\red0\\green16\\blue31;" //137
		"\\red0\\green32\\blue63;" //138
		"\\red0\\green48\\blue95;" //139
		"\\red0\\green64\\blue127;" //140
		"\\red0\\green80\\blue159;" //141
		"\\red0\\green96\\blue191;" //142
		"\\red0\\green112\\blue223;" //143
		"\\red0\\green128\\blue255;" // 144 
		"\\red31\\green143\\blue255;" // 145 
		"\\red63\\green159\\blue255;" // 146 
		"\\red95\\green175\\blue255;" // 147 
		"\\red127\\green191\\blue255;" // 148 
		"\\red159\\green207\\blue255;" // 149 
		"\\red191\\green223\\blue255;" // 150 
		"\\red223\\green239\\blue255;" // 151 
		"\\red255\\green255\\blue255;" // 152 
		"\\red0\\green0\\blue0;" //153
		"\\red0\\green0\\blue31;" //154
		"\\red0\\green0\\blue63;" //155
		"\\red0\\green0\\blue95;" //156
		"\\red0\\green0\\blue127;" //157
		"\\red0\\green0\\blue159;" //158
		"\\red0\\green0\\blue191;" //159
		"\\red0\\green0\\blue223;" //160
		"\\red0\\green0\\blue255;" // 161 
		"\\red31\\green31\\blue255;" // 162 
		"\\red63\\green63\\blue255;" // 163 
		"\\red95\\green95\\blue255;" // 164 
		"\\red127\\green127\\blue255;" // 165 
		"\\red159\\green159\\blue255;" // 166 
		"\\red191\\green191\\blue255;" // 167 
		"\\red223\\green223\\blue255;" // 168 
		"\\red255\\green255\\blue255;" // 169 
		"\\red0\\green0\\blue0;" //170
		"\\red16\\green0\\blue31;" //171
		"\\red32\\green0\\blue63;" //172
		"\\red48\\green0\\blue95;" //173
		"\\red64\\green0\\blue127;" //174
		"\\red80\\green0\\blue159;" //175
		"\\red96\\green0\\blue191;" //176
		"\\red112\\green0\\blue223;" //177
		"\\red128\\green0\\blue255;" // 178 
		"\\red143\\green31\\blue255;" // 179 
		"\\red159\\green63\\blue255;" // 180 
		"\\red175\\green95\\blue255;" // 181 
		"\\red191\\green127\\blue255;" // 182 
		"\\red207\\green159\\blue255;" // 183 
		"\\red223\\green191\\blue255;" // 184 
		"\\red239\\green223\\blue255;" // 185 
		"\\red255\\green255\\blue255;" // 186 
		"\\red0\\green0\\blue0;" //187
		"\\red31\\green0\\blue31;" //188
		"\\red63\\green0\\blue63;" //189
		"\\red95\\green0\\blue95;" //190
		"\\red127\\green0\\blue127;" //191
		"\\red159\\green0\\blue159;" //192
		"\\red191\\green0\\blue191;" //193
		"\\red223\\green0\\blue223;" //194
		"\\red255\\green0\\blue255;" // 195 
		"\\red255\\green31\\blue255;" // 196 
		"\\red255\\green63\\blue255;" // 197 
		"\\red255\\green95\\blue255;" // 198 
		"\\red255\\green127\\blue255;" // 199 
		"\\red255\\green159\\blue255;" // 200 
		"\\red255\\green191\\blue255;" // 201 
		"\\red255\\green223\\blue255;" // 202 
		"\\red255\\green255\\blue255;" // 203 
		"\\red0\\green0\\blue0;" //204
		"\\red31\\green0\\blue16;" //205
		"\\red63\\green0\\blue32;" //206
		"\\red95\\green0\\blue48;" //207
		"\\red127\\green0\\blue64;" //208
		"\\red159\\green0\\blue80;" //209
		"\\red191\\green0\\blue96;" //210
		"\\red223\\green0\\blue112;" //211
		"\\red255\\green0\\blue128;" // 212 
		"\\red255\\green31\\blue143;" // 213 
		"\\red255\\green63\\blue159;" // 214 
		"\\red255\\green95\\blue175;" // 215 
		"\\red255\\green127\\blue191;" // 216 
		"\\red255\\green159\\blue207;" // 217 
		"\\red255\\green191\\blue223;" // 218 
		"\\red255\\green223\\blue239;" // 219 
		"\\red255\\green255\\blue255;" // 220 
	;
}